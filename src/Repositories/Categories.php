<?php
/**
 * Category repository.
 *
 * Handle Category insert, update, delete & retrieve from database.
 *
 * @version   1.1.0
 * @package   EverAccounting\Repositories
 */

namespace EverAccounting\Repositories;

use EverAccounting\Abstracts\ResourceRepository;
use EverAccounting\Models\Category;

defined( 'ABSPATH' ) || exit;

/**
 * Class Categories
 *
 * @since   1.1.0
 *
 * @package EverAccounting\Repositories
 */
class Categories extends ResourceRepository {
	/**
	 * Database table name.
	 *
	 * @since 1.1.0
	 * @var string
	 */
	const TABLE = 'ea_categories';

	/**
	 * Categories constructor.
	 */
	public function __construct() {
		global $wpdb;
		$this->table       = $wpdb->prefix . self::TABLE;
		$this->table_name  = self::TABLE;
		$this->primary_key = 'id';
		$this->object_type = 'category';
	}


	/**
	 * Retrieves the list of columns for the database table.
	 *
	 * Sub-classes should define an array of columns here.
	 *
	 * @since 1.1.0
	 * @return array List of columns.
	 */
	public static function get_columns() {
		return array(
			'name'         => self::VARCHAR,
			'type'         => self::VARCHAR,
			'color'        => self::VARCHAR,
			'enabled'      => self::TINYINT,
			'date_created' => self::DATETIME,
		);
	}

	/**
	 * Retrieves column defaults.
	 *
	 * Sub-classes can define default for any/all of columns defined in the get_columns() method.
	 *
	 * @since 1.1.0
	 * @return array All defined column defaults.
	 */
	public static function get_defaults() {
		return array(
			'name'         => '',
			'type'         => '',
			'color'        => '',
			'enabled'      => 1,
			'date_created' => current_time( 'mysql' ),
		);
	}

	/**
	 * @since 1.1.0
	 *
	 * @param array $args
	 *
	 * @return array|int
	 */
	public function get_items( $args = array(), $callback = false ) {
		$args = wp_parse_args(
			$args,
			array(
				'where' => array(),
				'type'  => '',
			)
		);

		if ( ! empty( $args['type'] ) && 'all' !== $args['type'] ) {
			$types = wp_parse_slug_list( $args['type'] );

			$args['where'][] = array(
				'joint'     => 'AND',
				'condition' => "{$this->table_name}.type IN " . '("' . implode( '","', $types ) . '")',
			);
			unset( $args['type'] );
		}

		return parent::get_items( $args, $callback ); // TODO: Change the autogenerated stub
	}
}
