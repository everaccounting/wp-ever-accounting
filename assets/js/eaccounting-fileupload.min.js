jQuery(function(o) {
	o('.ea-file-upload').each(function() {
		o(this).fileupload({
			dataType: 'json',
			dropZone: o(this),
			url: ajaxurl,
			formData: { script: !0, action: 'eaccounting_file_upload', nonce: o(this).data('nonce') },
			change: function() {
				this.validation_errors = [];
			},
			add: function(e, t) {
				var i = o(this).closest('.ea-file-field'),
					a = o(this).closest('form'),
					r = [],
					s = o(this).data('file_types');
				if (s) {
					var n = new RegExp('(.|/)(' + s + ')$', 'i');
					t.originalFiles[0].name.length &&
						!n.test(t.originalFiles[0].name) &&
						r.push('Invalid file type. Accepted types: ' + s);
				}
				0 < r.length
					? (this.validation_errors = this.validation_errors.concat(r))
					: (a.find(':input[type="submit"]').attr('disabled', 'disabled'),
					  (t.context = o('<progress value="" max="100"></progress>').appendTo(i)),
					  t.submit());
			},
			progress: function(e, t) {
				var i = parseInt((t.loaded / t.total) * 100, 10);
				t.context.val(i);
			},
			fail: function(e, t) {
				var i = o(this),
					a = i.closest('form');
				t.errorThrown && window.alert(t.errorThrown),
					t.context.remove(),
					a.find(':input[type="submit"]').removeAttr('disabled'),
					i.trigger('update_status');
			},
			done: function(e, t) {
				var i = o(this),
					a = o(this).closest('.ea-file-field'),
					r = i.closest('form'),
					s = ['jpg', 'gif', 'png', 'jpeg', 'jpe'];
				t.context.remove(),
					'undefined' == typeof t.result.success || t.result.success || this.validation_errors.push(t.result.data),
					o.each(t.result.files, function(e, t) {
						i.val(''),
							t.error
								? this.validation_errors.push(t.error)
								: (a.addClass('has-value'),
								  a.find('input[type="hidden"]').val(t.url),
								  a
										.find('.ea-file-link')
										.attr('href', t.url)
										.text(t.name.substring(11)),
								  0 <= o.inArray(t.extension, s)
										? (a.css('background-image', 'url(' + t.url + ')'), a.removeClass('file-type-file'))
										: (a.addClass('file-type-file'), a.css('background-image', '')));
					}),
					0 < this.validation_errors.length &&
						((this.validation_errors = this.validation_errors.filter(function(e, t, i) {
							return i.indexOf(e) === t;
						})),
						window.alert(this.validation_errors.join('\n'))),
					r.find(':input[type="submit"]').removeAttr('disabled'),
					i.trigger('update_status');
			},
		});
	}),
		o(document).on('click', '.ea-file-remove', function(e) {
			e.preventDefault(), e.stopPropagation();
			var t = o(this).closest('.ea-file-field');
			t.find('.ea-file-value').val(),
				t
					.find('.ea-file-link')
					.attr('href', '#')
					.text(''),
				t.css('background-image', ''),
				t.removeClass('has-value'),
				t.removeClass('file-type-file');
		});
});
