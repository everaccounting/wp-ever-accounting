(window.eaccounting = window.eaccounting || {}),
	(jQuery.fn.serializeObject = function () {
		var e = {},
			n = this.serializeArray();
		return (
			jQuery.each(n, function () {
				e[this.name] !== undefined
					? (e[this.name].push || (e[this.name] = [e[this.name]]), e[this.name].push(this.value || ''))
					: (e[this.name] = this.value || '');
			}),
			e
		);
	}),
	jQuery(function (o) {
		(o.fn.eaccounting_select2 = function (e) {
			return this.each(function () {
				new o.eaccounting_select2(this, e);
			});
		}),
			(o.eaccounting_select2 = function (e, n) {
				(this.el = e),
					(this.$el = o(e)),
					(this.placeholder = this.$el.attr('placeholder')),
					(this.template = this.$el.attr('data-template')),
					(this.nonce = this.$el.attr('data-nonce')),
					(this.type = this.$el.attr('data-type')),
					(this.creatable_text = this.$el.attr('data-text')),
					(this.creatable = this.$el.is('[data-creatable]')),
					(this.creatable = !0 === this.creatable),
					(this.ajax = this.$el.is('[data-ajax]')),
					(this.ajax = !0 === this.ajax),
					(this.id = this.$el.attr('id')),
					!this.ajax ||
						(this.type && this.nonce) ||
						(console.warn('ajax type defined without nonce and data type'), (this.ajax = !1)),
					this.creatable &&
						!this.template &&
						(console.warn('modal type defined without template'), (this.creatable = !1));
				var c = this,
					t = {};
				(t.placeholder = this.placeholder),
					(t.allowClear = !1),
					this.ajax &&
						(t.ajax = {
							cache: !0,
							delay: 500,
							url: eaccounting_i10n.ajaxurl,
							method: 'POST',
							dataType: 'json',
							data: function (e) {
								return {
									action: 'eaccounting_dropdown_search',
									nonce: c.nonce,
									type: c.type,
									search: e.term,
									page: e.page,
								};
							},
							processResults: function (e, n) {
								return (n.page = n.page || 1), { results: e.results, pagination: { more: e.pagination.more } };
							},
						});
				var a = o.extend({}, t, n);
				return (
					this.$el.select2(a),
					this.creatable &&
						c.template &&
						this.$el.on('select2:open', function (e) {
							var n,
								t = o('#select2-' + c.id + '-results').closest('.select2-results');
							t.children('.ea-select2-footer').length ||
								((n = o(
									'<a href="#" class="ea-select2-footer"><span class="dashicons dashicons-plus"></span>' +
										c.creatable_text +
										'</a>'
								).on('click', function (e) {
									e.preventDefault(),
										c.$el.select2('close'),
										console.log(c.template),
										o(document).trigger('ea_trigger_creatable', [c.$el, c.template]);
								})),
								t.append(n));
						}),
					this.$el
				);
			}),
			o('.ea-select2').eaccounting_select2();
	}),
	jQuery(function (c) {
		jQuery.fn.ea_color_picker = function () {
			return this.each(function () {
				var t = this;
				c(t)
					.iris({
						change: function (e, n) {
							c(t).parent().find('.colorpickpreview').css({ backgroundColor: n.color.toString() });
						},
						hide: !0,
						border: !0,
					})
					.on('click focus', function (e) {
						e.stopPropagation(),
							c('.iris-picker').hide(),
							c(t).closest('div').find('.iris-picker').show(),
							c(t).data('original-value', c(t).val());
					})
					.on('change', function () {
						c(t).is('.iris-error') &&
							(c(this)
								.data('original-value')
								.match(/^\#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/)
								? c(t).val(c(t).data('original-value')).change()
								: c(t).val('').change());
					}),
					c('body').on('click', function () {
						c('.iris-picker').hide();
					});
			});
		};
	}),
	jQuery(function (n) {
		(n.eaccounting_redirect = function (e) {
			if ('object' == typeof e) {
				if (!('redirect' in e)) return;
				e = e.redirect;
			}
			if (e) {
				if (!(e = e.trim())) return !1;
				var n = navigator.userAgent.toLowerCase(),
					t = -1 !== n.indexOf('msie'),
					c = parseInt(n.substr(4, 2), 10);
				if (t && c < 9) {
					var a = document.createElement('a');
					return (a.href = e), document.body.appendChild(a), a.click();
				}
				window.location.href = e;
			}
		}),
			(n.fn.eaccounting_redirect = function (e) {
				return new n.eaccounting_redirect(e);
			});
	}),
	jQuery(function (a) {
		(a.fn.eaccounting_creatable = function (e) {
			return this.each(function () {
				new a.eaccounting_creatable(this, e);
			});
		}),
			(a.eaccounting_creatable = function (e, n) {
				(this.defaults = {
					option: function (e) {
						return { id: e.id, text: e.name };
					},
					template: undefined,
					onReady: undefined,
					onSubmit: undefined,
				}),
					(this.el = e),
					(this.$el = a(e)),
					(this.options = a.extend(this.defaults, n));
				var c = this;
				return (
					(this.block = function () {
						c.$el.block({ message: null, overlayCSS: { background: '#fff', opacity: 0.6 } });
					}),
					(this.unblock = function () {
						c.$el.unblock();
					}),
					(this.onError = function (e) {
						console.warn(e), c.unblock();
					}),
					(this.init_plugins = function () {
						a('.ea-select2', this.$el).eaccounting_select2(), a('.ea-input-color').ea_color_picker();
					}),
					(this.handleSubmit = function (e, t) {
						c.block(),
							t.disableSubmit(),
							'function' == typeof c.options.onSubmit && c.options.onSubmit(c.$el, e, t),
							wp.ajax.send({
								data: e,
								success: function (e) {
									var n = c.options.option(e.item);
									c.$el.eaccounting_select2({ data: [n] }),
										c.$el.val(n.id).trigger('change'),
										a.eaccounting_notice(e.message, 'success'),
										t.closeModal(),
										t.enableSubmit();
								},
								error: function (e) {
									a.eaccounting_notice(e.message, 'error'), t.enableSubmit();
								},
							});
					}),
					(this.handleModal = function (e, n, t) {
						e.preventDefault(),
							n.is(c.$el) &&
								(e.preventDefault(),
								a(this).ea_backbone_modal({
									template: 'ea-modal-' + t,
									onSubmit: c.handleSubmit,
									onReady: function (e, n) {
										'function' == typeof c.options.onReady && c.options.onReady(c.$el, n, c);
									},
								}));
					}),
					(this.init = function () {
						a(document).on('ea_trigger_creatable', c.handleModal).on('ea_backbone_modal_loaded', c.init_plugins);
					}),
					this.init(),
					this
				);
			});
	}),
	jQuery(function (c) {
		(c.fn.eaccounting_form = function (e) {
			return this.each(function () {
				new c.eaccounting_form(this, e);
			});
		}),
			(c.eaccounting_form = function (e, n) {
				var t = {};
				(t.el = e),
					(t.$el = c(e)),
					(t.options = n),
					(t.account_id = c('#account_id, #from_account_id', t.$el)),
					(t.currency_code = c('#currency_code', t.$el)),
					(t.amount = c('#amount, #opening_balance', t.$el)),
					(t.code = c('#code', t.$el)),
					(t.block = function () {
						t.$el.block({ message: null, overlayCSS: { background: '#fff', opacity: 0.6 } });
					}),
					(t.unblock = function () {
						t.$el.unblock();
					}),
					(t.onError = function (e) {
						console.warn(e), t.unblock();
					}),
					(t.maskAmount = function (e) {
						t.amount.inputmask('decimal', {
							alias: 'numeric',
							groupSeparator: e.thousand_separator,
							autoGroup: !0,
							digits: e.precision,
							radixPoint: e.decimal_separator,
							digitsOptional: !1,
							allowMinus: !1,
							prefix: e.symbol,
							placeholder: '0.000',
							rightAlign: 0,
						});
					}),
					(t.getCurrency = function (e, n, t) {
						wp.ajax.send('eaccounting_get_currency', {
							data: { code: e, _wpnonce: eaccounting_i10n.nonce.get_currency },
							success: n,
							error: t,
						});
					}),
					(t.getAccount = function (e, n, t) {
						wp.ajax.send('eaccounting_get_account', {
							data: { id: e, _wpnonce: eaccounting_i10n.nonce.get_account },
							success: n,
							error: t,
						});
					}),
					t.$el.on('submit', function (e) {
						e.preventDefault(),
							t.block(),
							wp.ajax.send({
								data: t.$el.serializeObject(),
								success: function (e) {
									t.unblock(), c.eaccounting_notice(e, 'success'), c.eaccounting_redirect(e);
								},
								error: function (e) {
									console.warn(e), t.unblock(), c.eaccounting_notice(e.message, 'error');
								},
							});
					}),
					t.currency_code.on('change', function () {
						var e;
						t.amount.length &&
							((e = t.currency_code.val()),
							t.block(),
							t.getCurrency(
								e,
								function (e) {
									t.maskAmount(e), t.unblock();
								},
								t.onError
							));
					}),
					t.account_id.on('change', function () {
						if (t.amount.length) {
							var e = t.account_id.val(),
								n = parseInt(e, 10);
							if (!n) return;
							t.block(),
								t.getAccount(
									n,
									function (e) {
										t.getCurrency(
											e.currency_code,
											function (e) {
												t.maskAmount(e), t.unblock();
											},
											t.onError
										);
									},
									t.onError
								);
						}
					}),
					t.code.on('change', function () {
						var e = t.code.val();
						if ((console.log(e), !e)) return !1;
						try {
							(currency = eaccounting_i10n.global_currencies[e]),
								c('#precision', t.$el).val(currency.precision).change(),
								c('#position', t.$el).val(currency.position).change(),
								c('#symbol', t.$el).val(currency.symbol).change(),
								c('#decimal_separator', t.$el).val(currency.decimal_separator).change(),
								c('#thousand_separator', t.$el).val(currency.thousand_separator).change();
						} catch (n) {
							console.warn(n.message);
						}
					}),
					t.account_id.trigger('change'),
					t.currency_code.trigger('change');
			});
	});
