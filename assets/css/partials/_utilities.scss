$spacer: 1em !default;
$spacers: () !default;
@for $i from 1 through 8 {
	$value: $i * 0.25 * $spacer;
	$spacers: map-merge($spacers, ($i: $value));
}

@mixin generate-utilities($utilities) {
	$grid-breakpoints: (
		xs: 0,
		sm: 576px,
		md: 768px,
		lg: 992px,
	) !default;
	$root : 'eac-';

	@each $utility, $config in $utilities {
		$values: map-get($config, values);

		// If the values are a list or string, convert it into a map
		@if type-of($values) == "string" or type-of(nth($values, 1)) != "list" {
			$values: zip($values, $values);
		}

		@each $key, $value in $values {
			$properties: map-get($config, property);
			// Multiple properties are possible, for example with vertical or horizontal margins or paddings
			@if type-of($properties) == "string" {
				$properties: append((), $properties);
			}

			$class: if(map-has-key($config, class), map-get($config, class), nth($properties, 1));
			$class: if($class == null, "", $class);

			// State params to generate pseudo-classes
			$state: if(map-has-key($config, state), map-get($config, state), ());

			// Don't prefix if value key is null (eg. with shadow class)
			$modifier: if($key, if($class == "", "", "-") + $key, "");

			@if $value != null {
				.#{ $root + $class + $modifier} {
					@each $property in $properties {
						#{$property}: $value;
					}
				}

				@each $pseudo in $state {
					.#{$root + $class + $modifier}-#{$pseudo}:#{$pseudo} {
						@each $property in $properties {
							#{$property}: $value;
						}
					}
				}

				// Generate responsive utility classes
				@if map-has-key($config, responsive) and map-get($config, responsive) {
					@each $breakpoint, $breakpoint-width in $grid-breakpoints {
						@if $breakpoint != "xs" {
							@media (min-width: $breakpoint-width) {
								@each $value, $prop in $values {
									.#{$root + $class + $modifier}-#{$breakpoint}-#{$value} {
										@each $property in $properties {
											#{$property}: $prop;
										}
									}
								}
							}
						}
					}
				}
			}
		}

	}

}


$utilities: (
	//"float": (
	//	responsive: true,
	//	property: float,
	//	values: (
	//		start: left,
	//		end: right,
	//		none: none,
	//	)
	//),
	//"align": (
	//	property: vertical-align,
	//	class: valign,
	//	values: baseline top middle bottom
	//),
	//"clear": (
	//	property: clear,
	//	values: (
	//		both: both,
	//	)
	//),
	//"overflow": (
	//	property: overflow,
	//	values: auto hidden visible scroll,
	//),
	//"display": (
	//	property: display,
	//	class: display,
	//	values: inline inline-block block flex inline-flex none
	//),
	//"position": (
	//	property: position,
	//	values: static relative absolute fixed sticky
	//),
	//"max-width": (
	//	property: max-width,
	//	class: mw,
	//	values: (100: 100%)
	//),
	//"max-height": (
	//	property: max-height,
	//	class: mh,
	//	values: (100: 100%)
	//),
	//// Flex Utility Classes
	//"flex": (
	//	property: flex,
	//	values: (fill: 1 1 auto)
	//),
	//"flex-direction": (
	//	property: flex-direction,
	//	class: flex,
	//	values: row column row-reverse column-reverse
	//),
	//"flex-grow": (
	//	property: flex-grow,
	//	class: flex,
	//	values: (
	//		grow-0: 0,
	//		grow-1: 1,
	//	)
	//),
	//"flex-shrink": (
	//	property: flex-shrink,
	//	class: flex,
	//	values: (
	//		shrink-0: 0,
	//		shrink-1: 1,
	//	)
	//),
	//"flex-wrap": (
	//	property: flex-wrap,
	//	class: flex,
	//	values: wrap nowrap wrap-reverse
	//),
	//"gap": (
	//	property: gap,
	//	class: gap,
	//	values: $spacers
	//),
	//"justify-content": (
	//	property: justify-content,
	//	values: (
	//		start: flex-start,
	//		end: flex-end,
	//		center: center,
	//		between: space-between,
	//		around: space-around,
	//		evenly: space-evenly,
	//	)
	//),
	//"align-items": (
	//	property: align-items,
	//	values: (
	//		start: flex-start,
	//		end: flex-end,
	//		center: center,
	//		baseline: baseline,
	//		stretch: stretch,
	//	)
	//),
	//"align-content": (
	//	property: align-content,
	//	values: (
	//		start: flex-start,
	//		end: flex-end,
	//		center: center,
	//		between: space-between,
	//		around: space-around,
	//		stretch: stretch,
	//	)
	//),
	//"align-self": (
	//	property: align-self,
	//	values: (
	//		auto: auto,
	//		start: flex-start,
	//		end: flex-end,
	//		center: center,
	//		baseline: baseline,
	//		stretch: stretch,
	//	)
	//),
	//// margin and padding
	//"margin": (
	//	property: margin,
	//	class: m,
	//	values: map-merge($spacers, (auto: auto))
	//),
	//"margin-x": (
	//	property: margin-right margin-left,
	//	class: mx,
	//	values: map-merge($spacers, (auto: auto))
	//),
	//"margin-y": (
	//	property: margin-top margin-bottom,
	//	class: my,
	//	values: map-merge($spacers, (auto: auto))
	//),
	//"margin-top": (
	//	property: margin-top,
	//	class: mt,
	//	values: map-merge($spacers, (auto: auto))
	//),
	//"margin-bottom": (
	//	property: margin-bottom,
	//	class: mb,
	//	values: map-merge($spacers, (auto: auto))
	//),
	//"margin-start": (
	//	property: margin-left,
	//	class: ms,
	//	values: map-merge($spacers, (auto: auto))
	//),
	//// Padding utilities
	//"padding": (
	//	property: padding,
	//	class: p,
	//	values: $spacers
	//),
	//"padding-x": (
	//	property: padding-right padding-left,
	//	class: px,
	//	values: $spacers
	//),
	//"padding-y": (
	//	property: padding-top padding-bottom,
	//	class: py,
	//	values: $spacers
	//),
	//"padding-top": (
	//	property: padding-top,
	//	class: pt,
	//	values: $spacers
	//),
	//"padding-bottom": (
	//	property: padding-bottom,
	//	class: pb,
	//	values: $spacers
	//),
	//"text-align": (
	//	property: text-align,
	//	class: text,
	//	values: (
	//		start: left,
	//		end: right,
	//		center: center,
	//	)
	//),
	//"font-weight": (
	//	property: font-weight,
	//	class: fw,
	//	values: (
	//		normal: normal,
	//		bold: bold,
	//		bolder: bolder,
	//		lighter: lighter,
	//	)
	//),
	//"text-transform": (
	//	property: text-transform,
	//	class: text,
	//	values: lowercase uppercase capitalize
	//),
	//"white-space": (
	//	property: white-space,
	//	class: text,
	//	values: (
	//		wrap: normal,
	//		nowrap: nowrap,
	//	)
	//),
	//"word-wrap": (
	//	property: word-wrap word-break,
	//	class: text,
	//	values: (break: break-word),
	//	rtl: false
	//),
	//"visibility": (
	//	property: visibility,
	//	class: null,
	//	values: (
	//		visible: visible,
	//		invisible: hidden,
	//	)
	//),
	//"border" : (
	//	property: border,
	//	class: border,
	//	values: (
	//		null: 1px solid #e1e2e2,
	//		0: 0,
	//	)
	//),
	//"border-top" : (
	//	property: border-top,
	//	class: border-top,
	//	values: (
	//		null: 1px solid #e1e2e2,
	//		0: 0,
	//	)
	//),
	//"border-bottom" : (
	//	property: border-bottom,
	//	class: border-bottom,
	//	values: (
	//		null: 1px solid #e1e2e2,
	//		0: 0,
	//	)
	//),
	//"border-start" : (
	//	property: border-left,
	//	class: border-start,
	//	values: (
	//		null: 1px solid #e1e2e2,
	//		0: 0,
	//	)
	//),
	//"border-end" : (
	//	property: border-right,
	//	class: border-end,
	//	values: (
	//		null: 1px solid #e1e2e2,
	//		0: 0,
	//	)
	//),
);

@include generate-utilities($utilities);


// make a function that takes base color code and mix white with a percentage
@function lighter($color, $percentage) {
	@return mix(white, $color, $percentage);
}


@function darker($color, $percentage) {
	@return mix(black, $color, $percentage);
}

@function invert($color, $amount: 100%) {
	$inverse: change-color($color, $hue: hue($color) + 180);
	@return mix($inverse, $color, $amount);
}
