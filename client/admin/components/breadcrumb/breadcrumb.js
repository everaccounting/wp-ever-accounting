/**
 * External dependencies
 */
import classNames from 'classnames';

/**
 * Internal dependencies
 */
import useItems from './use-items';
import useItemRender from './use-item-render';
import './style.scss';

const getPath = (params, path) => {
	if (path === undefined) {
		return path;
	}
	let mergedPath = (path || '').replace(/^\//, '');
	Object.keys(params).forEach((key) => {
		mergedPath = mergedPath.replace(`:${key}`, params[key]);
	});
	return mergedPath;
};

function Breadcrumb(props) {
	const { separator = '/', style, className, routes, items, children, itemRender, params = {}, ...restProps } = props;
	const mergedItems = useItems(items, routes);
	const mergedItemRender = useItemRender('eac-breadcrumb', itemRender);
	let crumbs;
	if (mergedItems && mergedItems.length > 0) {
		// generated by route
		const paths = [];
		const itemRenderRoutes = items || routes;
		crumbs = mergedItems.map((item, index) => {
			const {
				path,
				key,
				type,
				menu,
				overlay,
				onClick,
				className: itemClassName,
				separator: itemSeparator,
				dropdownProps,
			} = item;
			const mergedPath = getPath(params, path);
			if (mergedPath !== undefined) {
				paths.push(mergedPath);
			}
			const mergedKey = key ?? index;
			if (type === 'separator') {
				return <BreadcrumbSeparator key={mergedKey}>{itemSeparator}</BreadcrumbSeparator>;
			}
			const itemProps = {};
			const isLastItem = index === mergedItems.length - 1;
			if (menu) {
				itemProps.menu = menu;
			} else if (overlay) {
				itemProps.overlay = overlay;
			}
			let { href } = item;
			if (paths.length && mergedPath !== undefined) {
				href = `#/${paths.join('/')}`;
			}
			return (
				<InternalBreadcrumbItem
					key={mergedKey}
					{...itemProps}
					{...pickAttrs(item, { data: true, aria: true })}
					className={itemClassName}
					dropdownProps={dropdownProps}
					href={href}
					separator={isLastItem ? '' : separator}
					onClick={onClick}
					prefixCls={prefixCls}
				>
					{mergedItemRender(item, params, itemRenderRoutes, paths, href)}
				</InternalBreadcrumbItem>
			);
		});
	}
}

export default Breadcrumb;
