<?php
/**
 * Payments list table
 *
 * Admin payments list table, show all the outgoing transactions.
 *
 *
 * @since       1.0.2
 * @subpackage  EverAccounting\Admin\ListTables
 * @package     EverAccounting
 */

namespace EverAccounting\Admin\ListTables;

use \EverAccounting\Abstracts\List_Table;
use EverAccounting\Query_Transaction;
use EverAccounting\Transaction;

defined( 'ABSPATH' ) || exit();

/**
 * Class List_Table_Payments
 *
 * @since 1.0.2
 */
class List_Table_Payments extends List_Table {
	/**
	 * Type of the table should be use plural name.
	 *
	 * This will be used for filtering methods.
	 *
	 * @since 1.0.2
	 * @var string
	 */
	protected $list_table_type = 'payments';

	/**
	 * Default number of items to show per page
	 *
	 * @since 1.0.2
	 * @var string
	 */
	public $per_page = 20;

	/**
	 * Total number of item found
	 *
	 * @since 1.0.2
	 * @var int
	 */
	public $total_count;

	/**
	 * Get things started
	 *
	 * @since  1.0.2
	 *
	 * @see    WP_List_Table::__construct()
	 *
	 * @param array $args Optional. Arbitrary display and query arguments to pass through the list table. Default empty array.
	 *
	 */
	public function __construct( $args = array() ) {
		$args = (array) wp_parse_args(
			$args,
			array(
				'singular' => 'payment',
				'plural'   => 'payments',
			)
		);

		parent::__construct( $args );
	}

	/**
	 * Check if there is contents in the database.
	 *
	 * @since 1.0.2
	 * @return bool
	 */
	public function is_empty() {
		return parent::is_empty(); // TODO: Change the autogenerated stub
	}

	/**
	 * Render blank state.
	 *
	 * @since 1.0.2
	 * @return void
	 */
	protected function render_blank_state() {
		return parent::render_blank_state(); // TODO: Change the autogenerated stub
	}

	/**
	 * Define which columns to show on this screen.
	 *
	 * @since 1.0.2
	 * @return array
	 */
	public function define_columns() {
		return array(
			'cb'          => '<input type="checkbox" />',
			'date'        => __( 'Date', 'wp-ever-accounting' ),
			'amount'      => __( 'Amount', 'wp-ever-accounting' ),
			'account_id'  => __( 'Account Name', 'wp-ever-accounting' ),
			'category_id' => __( 'Category', 'wp-ever-accounting' ),
			'reference'   => __( 'Reference', 'wp-ever-accounting' ),
			'actions'     => __( 'Actions', 'wp-ever-accounting' ),
		);
	}

	/**
	 * Define sortable columns.
	 *
	 * @since 1.0.2
	 * @return array
	 */
	protected function define_sortable_columns() {
		return array(
			'date'        => array( 'paid_at', false ),
			'amount'      => array( 'amount', false ),
			'account_id'  => array( 'account_id', false ),
			'category_id' => array( 'category_id', false ),
			'reference'   => array( 'reference', false ),
		);
	}

	/**
	 * Define bulk actions
	 *
	 * @since 1.0.2
	 * @return array
	 */
	public function define_bulk_actions() {
		return array(
			'delete' => __( 'Delete', 'wp-ever-accounting' ),
		);
	}

	/**
	 * Define primary column.
	 *
	 * @since 1.0.2
	 * @return string
	 */
	public function get_primary_column() {
		return 'date';
	}


	/**
	 * Renders the checkbox column in the payments list table.
	 *
	 *
	 * @since  1.0.2
	 *
	 * @param Transaction $payment The current object.
	 *
	 * @return string Displays a checkbox.
	 */
	function column_cb( $payment ) {
		return sprintf( '<input type="checkbox" name="payment_id[]" value="%d"/>', $payment->get_id() );
	}

	/**
	 * Renders the "Date" column in the accounts list table.
	 *
	 *
	 * @since  1.0.2
	 *
	 * @param Transaction $payment The current account object.
	 *
	 * @return string Data shown in the Name column.
	 */
	function column_date( $payment ) {
		$date = $payment->get_paid_at()->date_i18n();

		$value = sprintf(
			'<a href="%1$s">%2$s</a>',
			esc_url(
				eaccounting_admin_url(
					array(
						'action'     => 'edit',
						'payment_id' => $payment->get_id(),
					)
				)
			),
			$date
		);

		return apply_filters( 'eaccounting_payments_table_date', $value, $payment );
	}

	/**
	 * Renders the "amount" column in the accounts list table.
	 *
	 * @since  1.0.2
	 *
	 * @param Transaction $payment The current account object.
	 *
	 * @return string Data shown in the amount column.
	 */
	function column_amount( $payment ) {
		return apply_filters( 'eaccounting_payments_table_amount', $payment->get_formatted_amount(), $payment );
	}

	/**
	 * Renders the "account" column in the accounts list table.
	 *
	 * @since  1.0.2
	 *
	 * @param Transaction $payment The current account object.
	 *
	 * @return string Data shown in the account column.
	 */
	function column_account_id( $payment ) {
		$account = eaccounting_get_account( $payment->get_account_id( 'edit' ) );
		$name    = $account ? $account->get_name() : __( '(Deleted Account)', 'wp-ever-accounting' );

		return apply_filters( 'eaccounting_payments_table_account', esc_html( $name ), $payment );
	}

	/**
	 * Renders the "Category" column in the accounts list table.
	 *
	 * @since  1.0.2
	 *
	 * @param Transaction $payment The current account object.
	 *
	 * @return string Data shown in the Category column.
	 */
	function column_category_id( $payment ) {
		$account = eaccounting_get_category( $payment->get_category_id( 'edit' ) );
		$name    = $account ? $account->get_name() : __( '(Deleted Category)', 'wp-ever-accounting' );

		return apply_filters( 'eaccounting_payments_table_category', esc_html( $name ), $payment );
	}

	/**
	 * Renders the "Reference" column in the payments list table.
	 *
	 * @since  1.0.2
	 *
	 * @param Transaction $payment The current account object.
	 *
	 * @return string Data shown in the Reference column.
	 */
	function column_reference( $payment ) {
		$reference = empty( $payment->get_reference() ) ? '&mdash;' : $payment->get_reference();

		return apply_filters( 'eaccounting_payments_table_reference', esc_html( $reference ), $payment );
	}

	/**
	 * @param $payment
	 *
	 * @since 1.0.2
	 *
	 * @return string
	 */
	function column_actions( $payment ) {
		$base_uri              = eaccounting_admin_url(
			array(
				'payment_id' => $payment->get_id(),
				'tab'        => 'payments',
			)
		);
		$row_actions           = array();
		$row_actions['edit']   = array(
			'label'    => __( 'Edit', 'wp-ever-accounting' ),
			'base_uri' => $base_uri,
		);
		$row_actions['delete'] = array(
			'label'    => __( 'Delete', 'wp-ever-accounting' ),
			'base_uri' => $base_uri,
			'nonce'    => 'payment-nonce',
		);

		$row_actions = apply_filters( 'eaccounting_payment_row_actions', $row_actions, $payment );

		return $this->row_actions( $row_actions );
	}



	/**
	 * Renders the message to be displayed when there are no items.
	 *
	 * @since  1.0.2
	 * @return void
	 */
	function no_items() {
		_e( 'No payments found.', 'wp-ever-accounting' );
	}

	/**
	 * Extra controls to be displayed between bulk actions and pagination.
	 *
	 * @since 1.0.2
	 *
	 * @param string $which
	 */
	protected function extra_tablenav( $which ) {
		if ( 'top' == $which ) {
			$account_id  = isset( $_GET['account_id'] ) ? absint( $_GET['account_id'] ) : '';
			$category_id = isset( $_GET['category_id'] ) ? absint( $_GET['category_id'] ) : '';
			$vendor_id   = isset( $_GET['vendor_id'] ) ? absint( $_GET['vendor_id'] ) : '';
			$start_date  = isset( $_GET['start_date'] ) ? eaccounting_clean( $_GET['start_date'] ) : '';
			$end_date    = isset( $_GET['end_date'] ) ? eaccounting_clean( $_GET['end_date'] ) : '';
			echo '<div class="alignleft actions ea-table-filter">';

			eaccounting_input_date_range(
				array(
					'start_date' => $start_date,
					'end_date'   => $end_date,
				)
			);

			eaccounting_account_dropdown(
				array(
					'name'    => 'account_id',
					'value'   => $account_id,
					'default' => '',
					'attr'    => array(
						'data-allow-clear' => true,
					),
				)
			);

			eaccounting_category_dropdown(
				array(
					'name'    => 'category_id',
					'value'   => $category_id,
					'default' => '',
					'type'    => 'expense',
					'attr'    => array(
						'data-allow-clear' => true,
					),
				)
			);
			eaccounting_contact_dropdown(
				array(
					'name'        => 'vendor_id',
					'value'       => $vendor_id,
					'default'     => '',
					'placeholder' => __( 'Select Vendor', 'wp-ever-accounting' ),
					'type'        => 'vendor',
					'attr'        => array(
						'data-allow-clear' => true,
					),
				)
			);

			submit_button( __( 'Filter', 'wp-ever-accounting' ), 'action', false, false );
			echo "\n";

			echo '</div>';
		}
	}

	/**
	 * Process the bulk actions
	 *
	 * @since 1.0.2
	 * @return void
	 */
	public function process_bulk_action() {
		if ( empty( $_REQUEST['_wpnonce'] ) ) {
			return;
		}

		if ( ! wp_verify_nonce( $_REQUEST['_wpnonce'], 'bulk-payments' ) && ! wp_verify_nonce( $_REQUEST['_wpnonce'], 'payment-nonce' ) ) {
			return;
		}

		$ids = isset( $_GET['payment_id'] ) ? $_GET['payment_id'] : false;

		if ( ! is_array( $ids ) ) {
			$ids = array( $ids );
		}

		$ids = array_map( 'absint', $ids );

		if ( empty( $ids ) ) {
			return;
		}

		$action = $this->current_action();
		foreach ( $ids as $id ) {
			switch ( $action ) {
				case 'export_csv':
					break;
				case 'delete':
					eaccounting_delete_transaction( $id );
					break;
				default:
					do_action( 'eaccounting_payments_do_bulk_action_' . $this->current_action(), $id );
			}
		}

		if ( isset( $_GET['_wpnonce'] ) ) {
			wp_safe_redirect(
				remove_query_arg(
					array(
						'payment_id',
						'action',
						'_wpnonce',
						'_wp_http_referer',
						'action2',
						'paged',
					)
				)
			);
			exit();
		}
	}

	/**
	 * Retrieve all the data for the table.
	 * Setup the final data for the table
	 *
	 * @since 1.0.2
	 * @return void
	 */
	public function prepare_items() {
		$columns               = $this->get_columns();
		$hidden                = $this->get_hidden_columns();
		$sortable              = $this->get_sortable_columns();
		$this->_column_headers = array( $columns, $hidden, $sortable );

		$this->process_bulk_action();

		$page = isset( $_GET['paged'] ) ? absint( $_GET['paged'] ) : 1;

		$search      = isset( $_GET['s'] ) ? $_GET['s'] : '';
		$order       = isset( $_GET['order'] ) ? $_GET['order'] : 'DESC';
		$orderby     = isset( $_GET['orderby'] ) ? $_GET['orderby'] : 'id';
		$account_id  = isset( $_GET['account_id'] ) ? absint( $_GET['account_id'] ) : '';
		$category_id = isset( $_GET['category_id'] ) ? absint( $_GET['category_id'] ) : '';
		$vendor_id   = isset( $_GET['vendor_id'] ) ? absint( $_GET['vendor_id'] ) : '';
		$start_date  = isset( $_GET['start_date'] ) ? eaccounting_clean( $_GET['start_date'] ) : '';
		$end_date    = isset( $_GET['end_date'] ) ? eaccounting_clean( $_GET['end_date'] ) : '';

		$per_page = $this->get_per_page();

		$args = wp_parse_args(
			$this->query_args,
			array(
				'number'      => $per_page,
				'offset'      => $per_page * ( $page - 1 ),
				'per_page'    => $per_page,
				'page'        => $page,
				'search'      => $search,
				'orderby'     => eaccounting_clean( $orderby ),
				'order'       => eaccounting_clean( $order ),
				'type'        => 'expense',
				'category_id' => $category_id,
				'account_id'  => $account_id,
				'contact_id'  => $vendor_id,
			)
		);

		$args = apply_filters( 'eaccounting_payments_table_get_payments', $args, $this );

		$this->items = Query_Transaction::init()
										->where( $args )
										->notTransfer()
										->where_date_between( 'paid_at', $start_date, $end_date )
										->get( OBJECT, 'eaccounting_get_transaction' );

		$this->total_count = Query_Transaction::init()
											  ->where( $args )
											  ->notTransfer()
											  ->where_date_between( 'paid_at', $start_date, $end_date )
											  ->count();

		$this->set_pagination_args(
			array(
				'total_items' => $this->total_count,
				'per_page'    => $per_page,
				'total_pages' => ceil( $this->total_count / $per_page ),
			)
		);
	}
}
