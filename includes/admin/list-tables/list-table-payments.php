<?php
/**
 * Payments list table
 *
 * Admin payments list table, show all the outgoing transactions.
 *
 *
 * @package     EverAccounting
 * @subpackage  EverAccounting\Admin\ListTables
 * @since       1.0.2
 */

namespace EverAccounting\Admin\ListTables;

use \EverAccounting\Abstracts\List_Table;
use EverAccounting\Query_Transaction;
use EverAccounting\Transaction;

defined( 'ABSPATH' ) || exit();

/**
 * Class List_Table_Payments
 * @since 1.0.2
 */
class List_Table_Payments extends List_Table {
	/**
	 * Type of the table should be use plural name.
	 *
	 * This will be used for filtering methods.
	 *
	 * @var string
	 * @since 1.0.2
	 */
	protected $list_table_type = 'payments';

	/**
	 * Default number of items to show per page
	 *
	 * @var string
	 * @since 1.0.2
	 */
	public $per_page = 20;

	/**
	 * Total number of item found
	 *
	 * @var int
	 * @since 1.0.2
	 */
	public $total_count;

	/**
	 * Get things started
	 *
	 * @param array $args Optional. Arbitrary display and query arguments to pass through the list table. Default empty array.
	 *
	 * @see WP_List_Table::__construct()
	 *
	 * @since  1.0.2
	 *
	 */
	public function __construct( $args = array() ) {
		$args = (array) wp_parse_args( $args, array(
			'singular' => 'payment',
			'plural'   => 'payments',
		) );

		parent::__construct( $args );
	}

	/**
	 * Check if there is contents in the database.
	 *
	 * @return bool
	 * @since 1.0.2
	 */
	public function is_empty() {
		return parent::is_empty(); // TODO: Change the autogenerated stub
	}

	/**
	 * Render blank state.
	 *
	 * @return void
	 * @since 1.0.2
	 */
	protected function render_blank_state() {
		return parent::render_blank_state(); // TODO: Change the autogenerated stub
	}

	/**
	 * Define which columns to show on this screen.
	 *
	 * @return array
	 * @since 1.0.2
	 */
	public function define_columns() {
		return array(
			'cb'          => '<input type="checkbox" />',
			'date'        => __( 'Date', 'wp-ever-accounting' ),
			'amount'      => __( 'Amount', 'wp-ever-accounting' ),
			'account_id'  => __( 'Account Name', 'wp-ever-accounting' ),
			'category_id' => __( 'Category', 'wp-ever-accounting' ),
			'reference'   => __( 'Reference', 'wp-ever-accounting' ),
			'actions'     => __( 'Actions', 'wp-ever-accounting' ),
		);
	}

	/**
	 * Define sortable columns.
	 *
	 * @return array
	 * @since 1.0.2
	 */
	protected function define_sortable_columns() {
		return array(
			'date'        => array( 'date', false ),
			'amount'      => array( 'amount', false ),
			'account_id'  => array( 'account_id', false ),
			'category_id' => array( 'category_id', false ),
			'reference'   => array( 'reference', false ),
		);
	}

	/**
	 * Define bulk actions
	 *
	 * @return array
	 * @since 1.0.2
	 */
	public function define_bulk_actions() {
		return array(
			'export_csv' => __( 'Export "CSV"', 'wp-ever-accounting' ),
			'delete'     => __( 'Delete', 'wp-ever-accounting' ),
		);
	}

	/**
	 * Define primary column.
	 *
	 * @return string
	 * @since 1.0.2
	 */
	public function get_primary_column() {
		return 'date';
	}


	/**
	 * Renders the checkbox column in the payments list table.
	 *
	 *
	 * @param Transaction $payment The current object.
	 *
	 * @return string Displays a checkbox.
	 * @since  1.0.2
	 *
	 */
	function column_cb( $payment ) {
		return sprintf( '<input type="checkbox" name="payment_id[]" value="%d"/>', $payment->get_id() );
	}

	/**
	 * Renders the "Date" column in the accounts list table.
	 *
	 *
	 * @param Transaction $payment The current account object.
	 *
	 * @return string Data shown in the Name column.
	 * @since  1.0.2
	 *
	 */
	function column_date( $payment ) {
		$date = $payment->get_paid_at()->date_i18n();

		$value = sprintf( '<a href="%1$s">%2$s</a>',
			esc_url( eaccounting_admin_url( [ 'action' => 'edit', 'account_id' => $payment->get_id() ] ) ),
			$date
		);

		return apply_filters( 'eaccounting_payments_table_date', $value, $payment );
	}

	/**
	 * Renders the "amount" column in the accounts list table.
	 *
	 * @param Transaction $payment The current account object.
	 *
	 * @return string Data shown in the amount column.
	 * @since  1.0.2
	 *
	 */
	function column_amount( $payment ) {
		return apply_filters( 'eaccounting_payments_table_amount', $payment->get_formatted_amount(), $payment );
	}

	/**
	 * Renders the "account" column in the accounts list table.
	 *
	 * @param Transaction $payment The current account object.
	 *
	 * @return string Data shown in the account column.
	 * @since  1.0.2
	 *
	 */
	function column_account_id( $payment ) {
		$account = eaccounting_get_account( $payment->get_account_id( 'edit' ) );
		$name    = $account ? $account->get_name() : __( '(Deleted Account)', 'wp-ever-account' );

		return apply_filters( 'eaccounting_payments_table_account', esc_html( $name ), $payment );
	}

	/**
	 * Renders the "Category" column in the accounts list table.
	 *
	 * @param Transaction $payment The current account object.
	 *
	 * @return string Data shown in the Category column.
	 * @since  1.0.2
	 *
	 */
	function column_category_id( $payment ) {
		$account = eaccounting_get_category( $payment->get_category_id( 'edit' ) );
		$name    = $account ? $account->get_name() : __( '(Deleted Category)', 'wp-ever-account' );

		return apply_filters( 'eaccounting_payments_table_category', esc_html( $name ), $payment );
	}

	/**
	 * Renders the "Reference" column in the payments list table.
	 *
	 * @param Transaction $payment The current account object.
	 *
	 * @return string Data shown in the Reference column.
	 * @since  1.0.2
	 *
	 */
	function column_reference( $payment ) {
		$reference = empty( $payment->get_reference() ) ? '&mdash;' : $payment->get_reference();

		return apply_filters( 'eaccounting_payments_table_reference', esc_html( $reference ), $payment );
	}


	/**
	 * Renders the message to be displayed when there are no items.
	 *
	 * @return void
	 * @since  1.0.2
	 */
	function no_items() {
		_e( 'No payments found.', 'wp-ever-accounting' );
	}

	/**
	 * Process the bulk actions
	 *
	 * @return void
	 * @since 1.0.2
	 */
	public function process_bulk_action() {
		if ( empty( $_REQUEST['_wpnonce'] ) ) {
			return;
		}

		if ( ! wp_verify_nonce( $_REQUEST['_wpnonce'], 'bulk-payments' ) && ! wp_verify_nonce( $_REQUEST['_wpnonce'], 'payment-nonce' ) ) {
			return;
		}

		$ids = isset( $_GET['payment_id'] ) ? $_GET['payment_id'] : false;

		if ( ! is_array( $ids ) ) {
			$ids = array( $ids );
		}

		$ids = array_map( 'absint', $ids );

		if ( empty( $ids ) ) {
			return;
		}

		$action = $this->current_action();
		foreach ( $ids as $id ) {
			switch ( $action ) {
				case 'export_csv':
					break;
				case 'delete':
					eaccounting_delete_transaction( $id );
					break;
				default:
					do_action( 'eaccounting_payments_do_bulk_action_' . $this->current_action(), $id );
			}
		}

		if ( ! empty( $action ) ) {
			wp_safe_redirect( remove_query_arg( [
				'payment_id',
				'action',
				'_wpnonce',
				'_wp_http_referer',
				'action2',
				'paged'
			] ) );
			exit();
		}
	}

	/**
	 * Retrieve all the data for the table.
	 * Setup the final data for the table
	 *
	 * @return void
	 * @since 1.0.2
	 */
	public function prepare_items() {
		$columns               = $this->get_columns();
		$hidden                = $this->get_hidden_columns();
		$sortable              = $this->get_sortable_columns();
		$this->_column_headers = array( $columns, $hidden, $sortable );

		$this->process_bulk_action();

		$page = isset( $_GET['paged'] ) ? absint( $_GET['paged'] ) : 1;;
		$search  = isset( $_GET['s'] ) ? $_GET['s'] : '';
		$order   = isset( $_GET['order'] ) ? $_GET['order'] : 'DESC';
		$orderby = isset( $_GET['orderby'] ) ? $_GET['orderby'] : 'id';

		$per_page = $this->get_per_page();

		$args = wp_parse_args( $this->query_args, array(
			'number'  => $per_page,
			'offset'  => $per_page * ( $page - 1 ),
			'search'  => $search,
			'orderby' => eaccounting_clean( $orderby ),
			'order'   => eaccounting_clean( $order ),
			'type'    => 'expense'
		) );

		$args = apply_filters( 'eaccounting_payments_table_get_payments', $args, $this );

		$this->items = Query_Transaction::init()->wp_query( $args )->get( OBJECT, 'eaccounting_get_transaction' );

		$this->total_count = Query_Transaction::init()->wp_query( $args )->count();

		$this->set_pagination_args( array(
			'total_items' => $this->total_count,
			'per_page'    => $per_page,
			'total_pages' => ceil( $this->total_count / $per_page )
		) );
	}
}
