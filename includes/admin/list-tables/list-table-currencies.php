<?php
/**
 * Currency Admin List Table.
 *
 * @package     EverAccounting
 * @subpackage  Admin/ListTables
 * @since       1.0.2
 */

namespace EverAccounting\Admin\ListTables;

use EverAccounting\Currency;
use EverAccounting\Abstracts\List_Table;
use EverAccounting\Query_Currency;


defined( 'ABSPATH' ) || exit();

/**
 * Class List_Table_Currency
 * @since 1.0.2
 * @package EverAccounting\Admin\ListTables
 */
class List_Table_Currency extends List_Table {
	/**
	 * Type of the table should be use plural name.
	 *
	 * This will be used for filtering methods.
	 *
	 * @var string
	 * @since 1.0.2
	 */
	protected $list_table_type = 'currencies';

	/**
	 * Default number of items to show per page
	 *
	 * @var string
	 * @since 1.0.2
	 */
	public $per_page = 20;

	/**
	 * Total number of item found
	 *
	 * @var int
	 * @since 1.0.2
	 */
	public $total_count;

	/**
	 * Number of active items found
	 *
	 * @var string
	 * @since 1.0
	 */
	public $active_count;

	/**
	 *  Number of inactive items found
	 *
	 * @var string
	 * @since 1.0
	 */
	public $inactive_count;

	/**
	 * Get things started
	 *
	 * @param array $args Optional. Arbitrary display and query arguments to pass through the list table. Default empty array.
	 *
	 * @see WP_List_Table::__construct()
	 *
	 * @since  1.0.2
	 *
	 */
	public function __construct( $args = array() ) {
		$args = (array) wp_parse_args( $args, array(
				'singular' => 'currency',
				'plural'   => 'currencies',
		) );

		parent::__construct( $args );
	}

	/**
	 * Check if there is contents in the database.
	 *
	 * @return bool
	 * @since 1.0.2
	 */
	public function is_empty() {
		return parent::is_empty(); // TODO: Change the autogenerated stub
	}

	/**
	 * Render blank state.
	 *
	 * @return void
	 * @since 1.0.2
	 */
	protected function render_blank_state() {
		return parent::render_blank_state(); // TODO: Change the autogenerated stub
	}

	/**
	 * Define which columns to show on this screen.
	 *
	 * @return array
	 * @since 1.0.2
	 */
	public function define_columns() {
		return array(
				'cb'      => '<input type="checkbox" />',
				'name'    => __( 'Name', 'wp-ever-accounting' ),
				'code'    => __( 'Code', 'wp-ever-accounting' ),
				'symbol'  => __( 'Symbol', 'wp-ever-accounting' ),
				'rate'    => __( 'Rate', 'wp-ever-accounting' ),
				'enabled' => __( 'Enabled', 'wp-ever-accounting' ),
		);
	}

	/**
	 * Define sortable columns.
	 *
	 * @return array
	 * @since 1.0.2
	 */
	protected function define_sortable_columns() {
		return array(
				'name'    => array( 'name', false ),
				'code'    => array( 'code', false ),
				'symbol'  => array( 'symbol', false ),
				'rate'    => array( 'rate', false ),
				'enabled' => array( 'enabled', false ),
		);
	}

	/**
	 * Define bulk actions
	 *
	 * @return array
	 * @since 1.0.2
	 */
	public function define_bulk_actions() {
		return array(
				'enable'  => __( 'Enable', 'wp-ever-accounting' ),
				'disable' => __( 'Disable', 'wp-ever-accounting' ),
				'delete'  => __( 'Delete', 'wp-ever-accounting' ),
		);
	}


	/**
	 * Define primary column.
	 *
	 * @return string
	 * @since 1.0.2
	 */
	public function get_primary_column() {
		return 'name';
	}


	/**
	 * Renders the checkbox column in the currencies list table.
	 *
	 *
	 * @param Currency $currency The current object.
	 *
	 * @return string Displays a checkbox.
	 * @since  1.0.2
	 *
	 */
	function column_cb( $currency ) {
		return sprintf( '<input type="checkbox" name="currency_id[]" value="%d"/>', $currency->get_id() );
	}

	/**
	 * Renders the "Name" column in the currency list table.
	 *
	 *
	 * @param Currency $currency The current currency object.
	 *
	 * @return string Data shown in the Name column.
	 * @since  1.0.2
	 *
	 */
	function column_name( $currency ) {
		$name = $currency->get_name();

		$value = sprintf( '<a href="%1$s">%2$s</a>',
				esc_url( eaccounting_admin_url( [ 'action' => 'edit', 'tab' => 'currencies', 'currency_id' => $currency->get_id() ] ) ),
				$name
		);

		return apply_filters( 'eaccounting_currencies_table_name', $value, $currency );
	}

	/**
	 * Renders the "Code" column in the currency list table.
	 *
	 *
	 * @param Currency $currency The current currency object.
	 *
	 * @return string Data shown in the Code column.
	 * @since  1.0.2
	 *
	 */
	function column_code( $currency ) {
		return apply_filters( 'eaccounting_currencies_table_code', esc_html($currency->get_code()), $currency );
	}

	/**
	 * Renders the "Symbol" column in the currency list table.
	 *
	 *
	 * @param Currency $currency The current currency object.
	 *
	 * @return string Data shown in the Symbol column.
	 * @since  1.0.2
	 *
	 */
	function column_symbol( $currency ) {
		return apply_filters( 'eaccounting_currencies_table_symbol', esc_html($currency->get_symbol()), $currency );
	}

	/**
	 * Renders the "Rate" column in the currency list table.
	 *
	 *
	 * @param Currency $currency The current currency object.
	 *
	 * @return string Data shown in the Rate column.
	 * @since  1.0.2
	 *
	 */
	function column_rate( $currency ) {
		return apply_filters( 'eaccounting_currencies_table_rate', eaccounting_round_number($currency->get_rate()), $currency );
	}

	/**
	 * Renders the "enabled" column in the list table.
	 *
	 * @param Currency $currency The current object.
	 *
	 * @return string Data shown in the "enabled" column.
	 * @since  1.0.2
	 *
	 */
	function column_enabled( $currency ) {
		ob_start();
		eaccounting_toggle( array(
				'name'  => 'enabled',
				'id'    => 'enabled_' . $currency->get_id(),
				'value' => $currency->get_enabled( 'edit' ),
				'naked' => true,
				'class' => 'ea_item_status_update',
				'attr'  => array(
						'data-object_id'   => $currency->get_id(),
						'data-nonce'       => wp_create_nonce( 'ea_status_update' ),
						'data-object_type' => 'currency'
				)
		) );
		$output = ob_get_contents();
		ob_get_clean();

		return apply_filters( 'eaccounting_accounts_table_enabled', $output, $currency );
	}


	/**
	 * Renders the message to be displayed when there are no items.
	 *
	 * @return void
	 * @since  1.0.2
	 */
	function no_items() {
		_e( 'No currencies found.', 'wp-ever-accounting' );
	}

	/**
	 * Process the bulk actions
	 *
	 * @return void
	 * @since 1.0.2
	 */
	public function process_bulk_action() {
		if ( empty( $_REQUEST['_wpnonce'] ) ) {
			return;
		}

		if ( ! wp_verify_nonce( $_REQUEST['_wpnonce'], 'bulk-currencies' ) && ! wp_verify_nonce( $_REQUEST['_wpnonce'], 'currency-nonce' ) ) {
			return;
		}

		$ids = isset( $_GET['currency_id'] ) ? $_GET['currency_id'] : false;

		if ( ! is_array( $ids ) ) {
			$ids = array( $ids );
		}

		$ids = array_map( 'absint', $ids );

		if ( empty( $ids ) ) {
			return;
		}

		$action = $this->current_action();
		foreach ( $ids as $id ) {
			switch ( $action ) {
				case 'enable':
					eaccounting_insert_currency( array(
							'id'      => $id,
							'enabled' => '1'
					) );
					break;
				case 'disable':
					eaccounting_insert_currency( array(
							'id'      => $id,
							'enabled' => '0'
					) );
					break;
				case 'delete':
					eaccounting_delete_currency( $id );
					break;
				default:
					do_action( 'eaccounting_currencies_do_bulk_action_' . $this->current_action(), $id );
			}
		}

		if ( isset( $_REQUEST['_wpnonce'] ) || ! empty( $action ) ) {
			wp_safe_redirect( remove_query_arg( [
				'currency_id',
				'action',
				'_wpnonce',
				'_wp_http_referer',
				'action2',
				'doaction',
				'paged'
			] ) );
			exit();
		}
	}

	/**
	 * Retrieve the view types
	 *
	 * @access public
	 * @return array $views All the views available
	 * @since 1.0.2
	 */
	public function get_views() {
		$base           = eaccounting_admin_url( array( 'tab' => 'currencies' ) );
		$current        = isset( $_GET['status'] ) ? $_GET['status'] : '';
		$total_count    = '&nbsp;<span class="count">(' . $this->total_count . ')</span>';
		$active_count   = '&nbsp;<span class="count">(' . $this->active_count . ')</span>';
		$inactive_count = '&nbsp;<span class="count">(' . $this->inactive_count . ')</span>';

		$views = array(
				'all'      => sprintf( '<a href="%s"%s>%s</a>', esc_url( remove_query_arg( 'status', $base ) ), $current === 'all' || $current == '' ? ' class="current"' : '', __( 'All', 'wp-ever-accounting' ) . $total_count ),
				'active'   => sprintf( '<a href="%s"%s>%s</a>', esc_url( add_query_arg( 'status', 'active', $base ) ), $current === 'active' ? ' class="current"' : '', __( 'Active', 'wp-ever-accounting' ) . $active_count ),
				'inactive' => sprintf( '<a href="%s"%s>%s</a>', esc_url( add_query_arg( 'status', 'inactive', $base ) ), $current === 'inactive' ? ' class="current"' : '', __( 'Inactive', 'wp-ever-accounting' ) . $inactive_count ),
		);

		return $views;
	}

	/**
	 * Retrieve all the data for the table.
	 * Setup the final data for the table
	 *
	 * @return void
	 * @since 1.0.2
	 */
	public function prepare_items() {
		$columns               = $this->get_columns();
		$hidden                = $this->get_hidden_columns();
		$sortable              = $this->get_sortable_columns();
		$this->_column_headers = array( $columns, $hidden, $sortable );

		$this->process_bulk_action();

		$page    = isset( $_GET['paged'] ) ? absint( $_GET['paged'] ) : 1;
		$status  = isset( $_GET['status'] ) ? $_GET['status'] : '';
		$search  = isset( $_GET['s'] ) ? $_GET['s'] : '';
		$order   = isset( $_GET['order'] ) ? $_GET['order'] : 'DESC';
		$orderby = isset( $_GET['orderby'] ) ? $_GET['orderby'] : 'id';

		$per_page = $this->get_per_page();

		$args = wp_parse_args( $this->query_args, array(
				'number'  => $per_page,
				'offset'  => $per_page * ( $page - 1 ),
				'per_page' => $per_page,
				'page'     => $page,
				'search'  => $search,
				'status'  => $status,
				'orderby' => eaccounting_clean( $orderby ),
				'order'   => eaccounting_clean( $order ),
		) );

		$args = apply_filters( 'eaccounting_currencies_table_get_currencies', $args, $this );

		$this->items = Query_Currency::init()->where( $args )->get( OBJECT, 'eaccounting_get_currency' );

		$this->active_count = Query_Currency::init()->where( array_merge( $this->query_args, array(
				'status' => 'active',
				'search' => $search
		) ) )->count();

		$this->inactive_count = Query_Currency::init()->where( array_merge( $this->query_args, array(
				'status' => 'inactive',
				'search' => $search
		) ) )->count();

		$this->total_count = $this->active_count + $this->inactive_count;

		$status = isset( $_GET['status'] ) ? $_GET['status'] : 'any';

		switch ( $status ) {
			case 'active':
				$total_items = $this->active_count;
				break;
			case 'inactive':
				$total_items = $this->inactive_count;
				break;
			case 'any':
			default:
				$total_items = $this->total_count;
				break;
		}

		$this->set_pagination_args( array(
				'total_items' => $total_items,
				'per_page'    => $per_page,
				'total_pages' => ceil( $total_items / $per_page )
		) );
	}
}
