<?php
/**
 * Customers list table
 *
 * Admin customers list table.
 *
 *
 * @package     EverAccounting
 * @subpackage  EverAccounting\Admin\ListTables
 * @since       1.0.2
 */

namespace EverAccounting\Admin\ListTables;

use EverAccounting\Abstracts\List_Table;
use EverAccounting\Contact;
use EverAccounting\Query_Contact;

/**
 * Class List_Table_Customers
 * @since 1.0.2
 * @package EverAccounting\Admin\Sales
 */
class List_Table_Customers extends List_Table {
	/**
	 * Type of the table should be use plural name.
	 *
	 * This will be used for filtering methods.
	 *
	 * @var string
	 * @since 1.0.2
	 */
	protected $list_table_type = 'customers';

	/**
	 * Default number of items to show per page
	 *
	 * @var string
	 * @since 1.0.2
	 */
	public $per_page = 20;

	/**
	 * Total number of item found
	 *
	 * @var int
	 * @since 1.0.2
	 */
	public $total_count;

	/**
	 * Number of active items found
	 *
	 * @var string
	 * @since 1.0.2
	 */
	public $active_count;

	/**
	 *  Number of inactive items found
	 *
	 * @var string
	 * @since 1.0.2
	 */
	public $inactive_count;

	/**
	 * Get things started
	 *
	 * @param array $args Optional. Arbitrary display and query arguments to pass through the list table. Default empty array.
	 *
	 * @see WP_List_Table::__construct()
	 *
	 * @since  1.0.2
	 *
	 */
	public function __construct( $args = array() ) {
		$args = (array) wp_parse_args( $args, array(
			'singular' => 'customer',
			'plural'   => 'customers',
		) );

		parent::__construct( $args );
	}

	/**
	 * Check if there is contents in the database.
	 *
	 * @return bool
	 * @since 1.0.2
	 */
	public function is_empty() {
		return parent::is_empty(); // TODO: Change the autogenerated stub
	}

	/**
	 * Render blank state.
	 *
	 * @return void
	 * @since 1.0.2
	 */
	protected function render_blank_state() {
		return parent::render_blank_state(); // TODO: Change the autogenerated stub
	}

	/**
	 * Define which columns to show on this screen.
	 *
	 * @return array
	 * @since 1.0.2
	 */
	public function define_columns() {
		return array(
			'cb'      => '<input type="checkbox" />',
			'name'    => __( 'Name', 'wp-ever-accounting' ),
			'email'   => __( 'Email', 'wp-ever-accounting' ),
			'phone'   => __( 'Phone', 'wp-ever-accounting' ),
			//'sales'   => __( 'Sales', 'wp-ever-accounting' ),
			'enabled' => __( 'Enabled', 'wp-ever-accounting' ),
			'actions' => __( 'Actions', 'wp-ever-accounting' ),
		);
	}

	/**
	 * Define sortable columns.
	 *
	 * @return array
	 * @since 1.0.2
	 */
	protected function define_sortable_columns() {
		return array(
			'name'    => array( 'name', false ),
			'email'   => array( 'email', false ),
			'phone'   => array( 'phone', false ),
			'sales'   => array( 'sales', false ),
			'enabled' => array( 'enabled', false ),
		);
	}

	/**
	 * Define bulk actions
	 *
	 * @return array
	 * @since 1.0.2
	 */
	public function define_bulk_actions() {
		return array(
			'enable'  => __( 'Enable', 'wp-ever-accounting' ),
			'disable' => __( 'Disable', 'wp-ever-accounting' ),
			'delete'  => __( 'Delete', 'wp-ever-accounting' ),
		);
	}

	/**
	 * Define primary column.
	 *
	 * @return string
	 * @since 1.0.2
	 */
	public function get_primary_column() {
		return 'date';
	}


	/**
	 * Renders the checkbox column in the customers list table.
	 *
	 *
	 * @param Contact $customer The current object.
	 *
	 * @return string Displays a checkbox.
	 * @since  1.0.2
	 *
	 */
	function column_cb( $customer ) {
		return sprintf( '<input type="checkbox" name="customer_id[]" value="%d"/>', $customer->get_id() );
	}

	/**
	 * Renders the "Name" column in the customer list table.
	 *
	 *
	 * @param Contact $customer The current contact object.
	 *
	 * @return string Data shown in the Name column.
	 * @since  1.0.2
	 *
	 */
	function column_name( $customer ) {
		$name = $customer->get_name();

		$value = sprintf( '<a href="%1$s">%2$s</a>',
			esc_url( eaccounting_admin_url( [ 'action' => 'edit','tab' => 'customers', 'customer_id' => $customer->get_id() ] ) ),
			$name
		);

		return apply_filters( 'eaccounting_customers_table_name', $value, $customer );
	}

	/**
	 * Renders the "Email" column in the customer list table.
	 *
	 *
	 * @param Contact $customer The current contact object.
	 *
	 * @return string Data shown in the Email column.
	 * @since  1.0.2
	 *
	 */
	function column_email( $customer ) {
		$email = empty( $customer->get_email() ) ? '&mdash;' : $customer->get_email();

		return apply_filters( 'eaccounting_customers_table_email', $email, $customer );
	}

	/**
	 * Renders the "Phone" column in the customer list table.
	 *
	 *
	 * @param Contact $customer The current contact object.
	 *
	 * @return string Data shown in the Phone column.
	 * @since  1.0.2
	 *
	 */
	function column_phone( $customer ) {
		$phone = empty( $customer->get_phone() ) ? '&mdash;' : $customer->get_phone();

		return apply_filters( 'eaccounting_customers_table_phone', $phone, $customer );
	}

	/**
	 * Renders the "enabled" column in the list table.
	 *
	 * @param Contact $customer The current object.
	 *
	 * @return string Data shown in the "enabled" column.
	 * @since  1.0.2
	 *
	 */
	function column_enabled( $customer ) {
		ob_start();
		eaccounting_toggle( array(
			'name'  => 'enabled',
			'id'    => 'enabled_' . $customer->get_id(),
			'value' => $customer->get_enabled( 'edit' ),
			'naked' => true,
			'class' => 'ea_item_status_update',
			'attr'  => array(
				'data-objectid'   => $customer->get_id(),
				'data-nonce'      => wp_create_nonce( 'ea_status_update' ),
				'data-objecttype' => 'contact'
			)
		) );
		$output = ob_get_contents();
		ob_get_clean();

		return apply_filters( 'eaccounting_customers_table_enabled', $output, $customer );
	}

	/**
	 * @param $customer
	 *
	 * @return string
	 * @since 1.0.2
	 *
	 */
	function column_actions( $customer ) {
		$base_uri    = eaccounting_admin_url( array( 'contact_id' => $customer->get_id(), 'tab' => 'customers' ) );
		$row_actions = array();

		$row_actions['edit']   = array(
			'label' => __( 'Edit', 'wp-ever-accounting' ),
			array( 'action' => 'edit' ),
			array( 'base_uri' => $base_uri )
		);
		$row_actions['delete'] = array(
			'label' => __( 'Delete', 'wp-ever-accounting' ),
			array( 'base_uri' => $base_uri, 'nonce' => 'account-nonce' )
		);

		$row_actions = apply_filters( 'eaccounting_customers_table_row_actions', $row_actions, $customer );

		return $this->row_actions( $row_actions );
	}

	/**
	 * Renders the message to be displayed when there are no items.
	 *
	 * @return void
	 * @since  1.0.2
	 */
	function no_items() {
		_e( 'No customers found.', 'wp-ever-accounting' );
	}

	/**
	 * Process the bulk actions
	 *
	 * @return void
	 * @since 1.0.2
	 */
	public function process_bulk_action() {
		if ( empty( $_REQUEST['_wpnonce'] ) ) {
			return;
		}

		if ( ! wp_verify_nonce( $_REQUEST['_wpnonce'], 'bulk-customers' ) && ! wp_verify_nonce( $_REQUEST['_wpnonce'], 'customer-nonce' ) ) {
			return;
		}

		$ids = isset( $_GET['customer_id'] ) ? $_GET['customer_id'] : false;

		if ( ! is_array( $ids ) ) {
			$ids = array( $ids );
		}

		$ids = array_map( 'absint', $ids );

		if ( empty( $ids ) ) {
			return;
		}

		$action = $this->current_action();
		foreach ( $ids as $id ) {
			switch ( $action ) {
				case 'activate':
					eaccounting_insert_contact( array(
						'id'      => $id,
						'enabled' => '1'
					) );
					break;
				case 'deactivate':
					eaccounting_insert_contact( array(
						'id'      => $id,
						'enabled' => '0'
					) );
					break;
				case 'delete':
					eaccounting_delete_contact( $id );
					break;
				default:
					do_action( 'eaccounting_customers_do_bulk_action_' . $this->current_action(), $id );
			}
		}

		if ( ! empty( $action ) ) {
			wp_safe_redirect( remove_query_arg( [
				'customer_id',
				'action',
				'_wpnonce',
				'_wp_http_referer',
				'action2',
				'paged'
			] ) );
			exit();
		}
	}

	/**
	 * Retrieve all the data for the table.
	 * Setup the final data for the table
	 *
	 * @return void
	 * @since 1.0.2
	 */
	public function prepare_items() {
		$columns               = $this->get_columns();
		$hidden                = $this->get_hidden_columns();
		$sortable              = $this->get_sortable_columns();
		$this->_column_headers = array( $columns, $hidden, $sortable );

		$this->process_bulk_action();

		$page    = isset( $_GET['paged'] ) ? absint( $_GET['paged'] ) : 1;
		$status  = isset( $_GET['status'] ) ? $_GET['status'] : '';
		$search  = isset( $_GET['s'] ) ? $_GET['s'] : '';
		$order   = isset( $_GET['order'] ) ? $_GET['order'] : 'DESC';
		$orderby = isset( $_GET['orderby'] ) ? $_GET['orderby'] : 'id';

		$per_page = $this->get_per_page();

		$args = wp_parse_args( $this->query_args, array(
			'number'  => $per_page,
			'offset'  => $per_page * ( $page - 1 ),
			'search'  => $search,
			'status'  => $status,
			'orderby' => eaccounting_clean( $orderby ),
			'order'   => eaccounting_clean( $order ),
			'type'    => 'customer'
		) );

		$args = apply_filters( 'eaccounting_customers_table_get_customers', $args, $this );

		$this->items = Query_Contact::init()->wp_query( $args )->get( OBJECT, 'eaccounting_get_contact' );

		$this->total_count = Query_Contact::init()->wp_query( $args )->count();

		$this->active_count = Query_Contact::init()->wp_query( array_merge( $this->query_args, array(
			'status' => 'active',
			'search' => $search
		) ) )->count();

		$this->inactive_count = Query_Contact::init()->wp_query( array_merge( $this->query_args, array(
			'status' => 'inactive',
			'search' => $search
		) ) )->count();

		$total_items = $this->total_count;

		$status = isset( $_GET['status'] ) ? $_GET['status'] : 'any';

		switch ( $status ) {
			case 'active':
				$total_items = $this->active_count;
				break;
			case 'inactive':
				$total_items = $this->inactive_count;
				break;
			case 'any':
				$total_items = $this->total_count;
				break;
		}

		$this->set_pagination_args( array(
			'total_items' => $total_items,
			'per_page'    => $per_page,
			'total_pages' => ceil( $total_items / $per_page )
		) );
	}
}
