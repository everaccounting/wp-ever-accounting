<?php
/**
 * Transfers Admin List Table
 *
 * @since       1.0.2
 * @subpackage  EverAccounting\Admin\ListTables
 * @package     EverAccounting
 */

namespace EverAccounting\Admin\ListTables;

use EverAccounting\Abstracts\List_Table;
use \EverAccounting\Transfer;

defined( 'ABSPATH' ) || exit();

class List_Table_Transfers extends List_Table {
	/**
	 * Type of the table should be use plural name.
	 *
	 * This will be used for filtering methods.
	 *
	 * @since 1.0.2
	 * @var string
	 */
	protected $list_table_type = 'transfers';

	/**
	 * Default number of items to show per page
	 *
	 * @since 1.0.2
	 * @var string
	 */
	public $per_page = 20;

	/**
	 * Total number of item found
	 *
	 * @since 1.0.2
	 * @var int
	 */
	public $total_count;

	/**
	 * Get things started
	 *
	 * @param array $args Optional. Arbitrary display and query arguments to pass through the list table. Default empty array.
	 *
	 * @since  1.0.2
	 *
	 * @see    WP_List_Table::__construct()
	 */
	public function __construct( $args = array() ) {
		$args = (array) wp_parse_args(
			$args,
			array(
				'singular' => 'transfer',
				'plural'   => 'transfers',
			)
		);

		parent::__construct( $args );
	}

	/**
	 * Check if there is contents in the database.
	 *
	 * @return bool
	 * @since 1.0.2
	 */
	public function is_empty() {
		return parent::is_empty(); // TODO: Change the autogenerated stub
	}

	/**
	 * Render blank state.
	 *
	 * @return void
	 * @since 1.0.2
	 */
	protected function render_blank_state() {
		return parent::render_blank_state(); // TODO: Change the autogenerated stub
	}

	/**
	 * Define which columns to show on this screen.
	 *
	 * @return array
	 * @since 1.0.2
	 */
	public function define_columns() {
		return array(
			'cb'              => '<input type="checkbox" />',
			'date'            => __( 'Date', 'wp-ever-accounting' ),
			'from_account_id' => __( 'From Account', 'wp-ever-accounting' ),
			'to_account_id'   => __( 'To Account', 'wp-ever-accounting' ),
			'amount'          => __( 'Amount', 'wp-ever-accounting' ),
			'reference'       => __( 'Reference', 'wp-ever-accounting' ),
			'actions'         => __( 'Actions', 'wp-ever-accounting' ),
		);
	}

	/**
	 * Define sortable columns.
	 *
	 * @return array
	 * @since 1.0.2
	 */
	protected function define_sortable_columns() {
		return array(
			'date'          => array( 'paid_at', false ),
			'amount'        => array( 'amount', false ),
			// 'from_account_id' => array( 'from_account_id', false ),
			// 'to_account_id'   => array( 'to_account_id', false ),
				'reference' => array( 'reference', false ),
		);
	}

	/**
	 * Define bulk actions
	 *
	 * @return array
	 * @since 1.0.2
	 */
	public function define_bulk_actions() {
		return array(
			'delete' => __( 'Delete', 'wp-ever-accounting' ),
		);
	}

	/**
	 * Define primary column.
	 *
	 * @return string
	 * @since 1.0.2
	 */
	public function get_primary_column() {
		return 'date';
	}


	/**
	 * Renders the checkbox column in the transfers list table.
	 *
	 * @param Transfer $transfer The current object.
	 *
	 * @return string Displays a checkbox.
	 * @since  1.0.2
	 */
	function column_cb( $transfer ) {
		return sprintf( '<input type="checkbox" name="transfer_id[]" value="%d"/>', $transfer->get_id() );
	}

	/**
	 * Renders the "Date" column in the transfer list table.
	 *
	 * @param Transfer $transfer The current transfer object.
	 *
	 * @return string Data shown in the Date column.
	 * @since  1.0.2
	 */
	function column_date( $transfer ) {
		$date = eaccounting_format_datetime( $transfer->get_date() );

		$value = sprintf(
			'<a href="%1$s">%2$s</a>',
			esc_url(
				eaccounting_admin_url(
					[
						'action'      => 'edit',
						'tab'         => 'transfers',
						'transfer_id' => $transfer->get_id(),
					]
				)
			),
			$date
		);

		return apply_filters( 'eaccounting_transfers_table_date', $value, $transfer );
	}

	/**
	 * Renders the "Category" column in the accounts list table.
	 *
	 * @param Transfer $transfer The current account object.
	 *
	 * @return string Data shown in the Category column.
	 * @since  1.0.2
	 */
	function column_from_account_id( $transfer ) {
		$account = eaccounting_get_account( $transfer->get_from_account_id() );
		$name    = $account ? $account->get_name() : __( '(Deleted Account)', 'wp-ever-accounting' );

		return apply_filters( 'eaccounting_transfers_table_from_account_id', esc_html( $name ), $transfer );
	}

	/**
	 * Renders the "Category" column in the accounts list table.
	 *
	 * @param Transfer $transfer The current account object.
	 *
	 * @return string Data shown in the Category column.
	 * @since  1.0.2
	 */
	function column_to_account_id( $transfer ) {
		$account = eaccounting_get_account( $transfer->get_to_account_id() );
		$name    = $account ? $account->get_name() : __( '(Deleted Account)', 'wp-ever-accounting' );

		return apply_filters( 'eaccounting_transfers_table_to_account_id', esc_html( $name ), $transfer );
	}

	/**
	 * Renders the "amount" column in the accounts list table.
	 *
	 * @param Transfer $transfer The current account object.
	 *
	 * @return string Data shown in the amount column.
	 * @since  1.0.2
	 */
	function column_amount( $transfer ) {
		return apply_filters( 'eaccounting_transfers_table_amount', $transfer->get_formatted_amount(), $transfer );
	}

	/**
	 * Renders the "Reference" column in the revenues list table.
	 *
	 * @param Transfer $transfer The current account object.
	 *
	 * @return string Data shown in the Reference column.
	 * @since  1.0.2
	 */
	function column_reference( $transfer ) {
		$reference = empty( $transfer->get_reference() ) ? '&mdash;' : $transfer->get_reference();

		return apply_filters( 'eaccounting_transfers_table_reference', esc_html( $reference ), $transfer );
	}

	/**
	 * @param $transfer
	 *
	 * @return string
	 * @since 1.0.2
	 */
	function column_actions( $transfer ) {
		$base_uri              = eaccounting_admin_url(
			array(
				'transfer_id' => $transfer->get_id(),
				'tab'         => 'transfers',
			)
		);
		$row_actions           = array();
		$row_actions['edit']   = array(
			'label'    => __( 'Edit', 'wp-ever-accounting' ),
			'base_uri' => $base_uri,
		);
		$row_actions['delete'] = array(
			'label'    => __( 'Delete', 'wp-ever-accounting' ),
			'base_uri' => $base_uri,
			'nonce'    => 'transfer-nonce',
		);

		$row_actions = apply_filters( 'eaccounting_transfer_row_actions', $row_actions, $transfer );

		return $this->row_actions( $row_actions );
	}

	/**
	 * Process the bulk actions
	 *
	 * @return void
	 * @since 1.0.2
	 */
	public function process_bulk_action() {
		if ( empty( $_REQUEST['_wpnonce'] ) ) {
			return;
		}

		if ( ! wp_verify_nonce( $_REQUEST['_wpnonce'], 'bulk-transfers' ) && ! wp_verify_nonce( $_REQUEST['_wpnonce'], 'transfer-nonce' ) ) {
			return;
		}

		$ids = isset( $_GET['transfer_id'] ) ? $_GET['transfer_id'] : false;

		if ( ! is_array( $ids ) ) {
			$ids = array( $ids );
		}

		$ids = array_map( 'absint', $ids );

		if ( empty( $ids ) ) {
			return;
		}

		$action = $this->current_action();
		foreach ( $ids as $id ) {
			switch ( $action ) {
				case 'delete':
					eaccounting_delete_transfer( $id );
					break;
				default:
					do_action( 'eaccounting_transfers_do_bulk_action_' . $this->current_action(), $id );
			}
		}

		if ( isset( $_GET['_wpnonce'] ) ) {
			wp_safe_redirect(
				remove_query_arg(
					[
						'transfer_id',
						'action',
						'_wpnonce',
						'_wp_http_referer',
						'doaction',
						'action2',
						'paged',
					]
				)
			);
			exit();
		}
	}

	/**
	 * Retrieve all the data for the table.
	 * Setup the final data for the table
	 *
	 * @return void
	 * @since 1.0.2
	 */
	public function prepare_items() {
		$columns               = $this->get_columns();
		$hidden                = $this->get_hidden_columns();
		$sortable              = $this->get_sortable_columns();
		$this->_column_headers = array( $columns, $hidden, $sortable );

		$this->process_bulk_action();

		$page = isset( $_GET['paged'] ) ? absint( $_GET['paged'] ) : 1;

		$search  = isset( $_GET['s'] ) ? $_GET['s'] : '';
		$order   = isset( $_GET['order'] ) ? $_GET['order'] : 'DESC';
		$orderby = isset( $_GET['orderby'] ) ? $_GET['orderby'] : 'id';

		$per_page = $this->get_per_page();

		$args = wp_parse_args(
			$this->query_args,
			array(
				'number'   => $per_page,
				'offset'   => $per_page * ( $page - 1 ),
				'per_page' => $per_page,
				'page'     => $page,
				'search'   => $search,
				'orderby'  => eaccounting_clean( $orderby ),
				'order'    => eaccounting_clean( $order ),
			)
		);

		$args = apply_filters( 'eaccounting_transfers_table_get_transfers', $args, $this );

		$this->items = \EverAccounting\Transfers\query( $args )
									 ->select( 'ea_transfers.*, ea_transactions.reference, ea_transactions.amount, ea_transactions.paid_at' )
									 ->include_transactions()
									 ->get( OBJECT, 'eaccounting_get_transfer' );

		$this->total_count = \EverAccounting\Transfers\query( $args )->count();

		$this->set_pagination_args(
			array(
				'total_items' => $this->total_count,
				'per_page'    => $per_page,
				'total_pages' => ceil( $this->total_count / $per_page ),
			)
		);
	}
}
