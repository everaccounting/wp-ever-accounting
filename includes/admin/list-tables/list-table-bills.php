<?php
/**
 * Bills Admin List Table
 *
 * @since       1.1.0
 * @subpackage  EverAccounting\Admin\ListTables
 * @package     EverAccounting
 */

namespace EverAccounting\Admin\ListTables;

use EverAccounting\Abstracts\List_Table;
use EverAccounting\Bill;

defined( 'ABSPATH' ) || exit();

/**
 * Class List_Table_Bills
 *
 * @since   1.1.0
 * @package EverAccounting\Admin\ListTables
 */
class List_Table_Bills extends List_Table {
	/**
	 * Type of the table should be use plural name.
	 *
	 * This will be used for filtering methods.
	 *
	 * @since 1.1.0
	 * @var string
	 */
	protected $list_table_type = 'bills';

	/**
	 * Default number of bills to show per page
	 *
	 * @since 1.1.0
	 * @var string
	 */
	public $per_page = 20;

	/**
	 * Total number of bill found
	 *
	 * @since 1.1.0
	 * @var int
	 */
	public $total_count;

	/**
	 * Number of active bills found
	 *
	 * @since 1.1.0
	 * @var string
	 */
	public $active_count;

	/**
	 *  Number of inactive bills found
	 *
	 * @since 1.1.0
	 * @var string
	 */
	public $inactive_count;

	/**
	 * Get things started
	 *
	 * @param array $args Optional. Arbitrary display and query arguments to pass through the list table. Default empty array.
	 *
	 * @see    WP_List_Table::__construct()
	 *
	 * @since  1.1.0
	 *
	 */
	public function __construct( $args = array() ) {
		$args = (array) wp_parse_args( $args, array(
			'singular' => 'invoice',
			'plural'   => 'invoices',
		) );

		parent::__construct( $args );
	}

	/**
	 * Check if there is contents in the database.
	 *
	 * @return bool
	 * @since 1.1.0
	 */
	public function is_empty() {
		return parent::is_empty(); // TODO: Change the autogenerated stub
	}

	/**
	 * Render blank state.
	 *
	 * @return void
	 * @since 1.1.0
	 */
	protected function render_blank_state() {
		return parent::render_blank_state(); // TODO: Change the autogenerated stub
	}

	/**
	 * Define which columns to show on this screen.
	 *
	 * @return array
	 * @since 1.1.0
	 */
	public function define_columns() {
		return array(
			'cb'           => '<input type="checkbox" />',
			'bill_number'  => __( 'Bill Number', 'wp-ever-accounting' ),
			'order_number' => __( 'Order Number', 'wp-ever-accounting' ),
			'status'       => __( 'Status', 'wp-ever-accounting' ),
			'invoiced_at'  => __( 'Invoiced at', 'wp-ever-accounting' ),
			'subtotal'     => __( 'Subtotal', 'wp-ever-accounting' ),
			'discount'     => __( 'Discount', 'wp-ever-accounting' ),
			'total'        => __( 'Total', 'wp-ever-accounting' ),
			'contact_name' => __( 'Contact Name', 'wp-ever-accounting' ),
			'actions'      => __( 'Actions', 'wp-ever-accounting' ),

		);
	}

	/**
	 * Define sortable columns.
	 *
	 * @return array
	 * @since 1.1.0
	 */
	protected function define_sortable_columns() {
		return array(
			'bill_number'  => array( 'bill_number', false ),
			'total'        => array( 'total', false ),
			'invoiced_at'  => array( 'invoiced_at', false ),
			'contact_name' => array( 'contact_name', false ),
		);
	}

	/**
	 * Define bulk actions
	 *
	 * @return array
	 * @since 1.1.0
	 */
	public function define_bulk_actions() {
		return parent::define_bulk_actions(); // TODO: Change the autogenerated stub
	}

	/**
	 * Define primary column.
	 *
	 * @return string
	 * @since 1.1.0
	 */
	public function get_primary_column() {
		return 'invoice_number';
	}

	/**
	 * Renders the checkbox column in the invoices list table.
	 *
	 *
	 * @param Bill $bill The current bill object.
	 *
	 * @return string Displays a checkbox.
	 * @since  1.1.0
	 *
	 */
	function column_cb( $bill ) {
		return sprintf( '<input type="checkbox" name="bill_id[]" value="%d"/>', $bill->get_id() );
	}

	/**
	 * Renders the "Bill Number" column in the items list table.
	 *
	 *
	 * @param Bill $bill The current bill object.
	 *
	 * @return string Data shown in the Bill Number column.
	 * @since  1.1.0
	 *
	 */
	function column_bill_number( $bill ) {
		$bill_number = $bill->get_bill_number();
		$value          = sprintf( '<a href="%1$s">%2$s</a>', esc_url( eaccounting_admin_url( [ 'action' => 'edit', 'bill_id' => $bill->get_id() ] ) ), $bill_number );

		return apply_filters( 'eaccounting_bills_table_invoice_number', $value, $bill );
	}

	/**
	 * Renders the "Order Number" column in the bills list table.
	 *
	 *
	 * @param Bill $bill The current bill object.
	 *
	 * @return string Data shown in the Order Number column.
	 * @since  1.1.0
	 *
	 */
	function column_order_number( $bill ) {
		return apply_filters( 'eaccounting_bills_table_order_number', $bill->get_order_number(), $bill );
	}

	/**
	 * Renders the "Status" column in the bills list table.
	 *
	 *
	 * @param Bill $bill The current bill object.
	 *
	 * @return string Data shown in the status column.
	 * @since  1.1.0
	 *
	 */
	function column_status( $bill ) {
		return apply_filters( 'eaccounting_bills_table_status', $bill->get_status(), $bill );
	}

	/**
	 * Renders the "Bill At" column in the bills list table.
	 *
	 *
	 * @param Bill $bill The current bill object.
	 *
	 * @return string Data shown in the Bill At column.
	 * @since  1.1.0
	 *
	 */
	function column_bill_at( $bill ) {
		return apply_filters( 'eaccounting_bills_table_invoiced_at', $bill->get_bill_at()->date_i18n(), $bill );
	}

	/**
	 * Renders the "Discount" column in the bills list table.
	 *
	 *
	 * @param Bill $bill The current invoice object.
	 *
	 * @return string Data shown in the discount column.
	 * @since  1.1.0
	 *
	 */
	function column_discount( $bill ) {
		return apply_filters( 'eaccounting_bills_table_discount', $bill->get_discount(), $bill );
	}

	/**
	 * Renders the "Total" column in the bills list table.
	 *
	 *
	 * @param Bill $bill The current bill object.
	 *
	 * @return string Data shown in the total column.
	 * @since  1.1.0
	 *
	 */
	function column_total( $bill ) {
		return apply_filters( 'eaccounting_bills_table_total', $bill->get_total(), $bill );
	}

	/**
	 * Renders the "Contact Name" column in the bills list table.
	 *
	 *
	 * @param Bill $bill The current invoice object.
	 *
	 * @return string Data shown in the contact_name column.
	 * @since  1.1.0
	 *
	 */
	function column_contact_name( $bill ) {
		return apply_filters( 'eaccounting_bills_table_contact_name', $bill->get_contact_name(), $bill );
	}

	/**
	 * @param $bill
	 *
	 * @return string
	 * @since 1.1.0
	 *
	 */
	function column_actions( $bill ) {
		$base_uri              = eaccounting_admin_url( array( 'bill_id' => $bill->get_id(), 'tab' => 'bills' ) );
		$row_actions           = array();
		$row_actions['edit']   = array(
			'label'    => __( 'Edit', 'wp-ever-accounting' ),
			'base_uri' => $base_uri,
		);
		$row_actions['delete'] = array(
			'label'    => __( 'Delete', 'wp-ever-accounting' ),
			'base_uri' => $base_uri,
			'nonce'    => 'account-nonce',
		);

		$row_actions = apply_filters( 'eaccounting_item_row_actions', $row_actions, $bill );

		return $this->row_actions( $row_actions );
	}

	/**
	 * Renders the message to be displayed when there are no bills.
	 *
	 * @return void
	 * @since  1.1.0
	 */
	function no_items() {
		_e( 'No bills found.', 'wp-ever-accounting' );
	}

	/**
	 * Process the bulk actions
	 *
	 * @return void
	 * @since 1.1.0
	 */
	public function process_bulk_action() {
		//todo will update it later
	}

	/**
	 * Retrieve the view types
	 *
	 * @access public
	 * @return array $views All the views available
	 * @since  1.1.0
	 */
	public function get_views() {
		$base           = eaccounting_admin_url();
		$current        = isset( $_GET['status'] ) ? $_GET['status'] : '';
		$total_count    = '&nbsp;<span class="count">(' . $this->total_count . ')</span>';
		$active_count   = '&nbsp;<span class="count">(' . $this->active_count . ')</span>';
		$inactive_count = '&nbsp;<span class="count">(' . $this->inactive_count . ')</span>';

		$views = array(
			'all'      => sprintf( '<a href="%s"%s>%s</a>', esc_url( remove_query_arg( 'status', $base ) ), $current === 'all' || $current == '' ? ' class="current"' : '', __( 'All', 'wp-ever-accounting' ) . $total_count ),
			'active'   => sprintf( '<a href="%s"%s>%s</a>', esc_url( add_query_arg( 'status', 'active', $base ) ), $current === 'active' ? ' class="current"' : '', __( 'Active', 'wp-ever-accounting' ) . $active_count ),
			'inactive' => sprintf( '<a href="%s"%s>%s</a>', esc_url( add_query_arg( 'status', 'inactive', $base ) ), $current === 'inactive' ? ' class="current"' : '', __( 'Inactive', 'wp-ever-accounting' ) . $inactive_count ),
		);

		return $views;
	}

	/**
	 * Retrieve all the data for the table.
	 * Setup the final data for the table
	 *
	 * @return void
	 * @since 1.1.0
	 */
	public function prepare_items() {
		$columns               = $this->get_columns();
		$hidden                = $this->get_hidden_columns();
		$sortable              = $this->get_sortable_columns();
		$this->_column_headers = array( $columns, $hidden, $sortable );

		$this->process_bulk_action();

		$page    = isset( $_GET['paged'] ) ? absint( $_GET['paged'] ) : 1;
		$status  = isset( $_GET['status'] ) ? $_GET['status'] : '';
		$search  = isset( $_GET['s'] ) ? $_GET['s'] : '';
		$order   = isset( $_GET['order'] ) ? $_GET['order'] : 'DESC';
		$orderby = isset( $_GET['orderby'] ) ? $_GET['orderby'] : 'id';

		$per_page = $this->get_per_page();

		$args = wp_parse_args( $this->query_args, array(
			'number'   => $per_page,
			'offset'   => $per_page * ( $page - 1 ),
			'per_page' => $per_page,
			'page'     => $page,
			'status'   => $status,
			'search'   => $search,
			'orderby'  => eaccounting_clean( $orderby ),
			'order'    => eaccounting_clean( $order )
		) );

		$args = apply_filters( 'eaccounting_bills_table_query_args', $args, $this );


	}


}
