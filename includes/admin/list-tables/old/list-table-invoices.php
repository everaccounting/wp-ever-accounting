<?php
/**
 * Invoices Admin List Table
 *
 * @since       1.1.0
 * @subpackage  EverAccounting\Admin\ListTables
 * @package     EverAccounting
 */

namespace EverAccounting\Admin\ListTables;

use EverAccounting\Abstracts\List_Table;
use EverAccounting\Models\Invoice;


defined( 'ABSPATH' ) || exit();

/**
 * Class List_Table_Invoices
 *
 * @since 1.1.0
 * @package EverAccounting\Admin\ListTables
 */
class List_Table_Invoices extends List_Table {
	/**
	 * Type of the table should be use plural name.
	 *
	 * This will be used for filtering methods.
	 *
	 * @since 1.1.0
	 * @var string
	 */
	protected $list_table_type = 'invoices';

	/**
	 * Default number of items to show per page
	 *
	 * @since 1.1.0
	 * @var string
	 */
	public $per_page = 20;

	/**
	 * Total number of item found
	 *
	 * @since 1.1.0
	 * @var int
	 */
	public $total_count;

	/**
	 * Number of active items found
	 *
	 * @since 1.1.0
	 * @var string
	 */
	public $active_count;

	/**
	 *  Number of inactive items found
	 *
	 * @since 1.1.0
	 * @var string
	 */
	public $inactive_count;

	/**
	 * Get things started
	 *
	 * @param array $args Optional. Arbitrary display and query arguments to pass through the list table. Default empty array.
	 *
	 * @since  1.1.0
	 *
	 * @see WP_List_Table::__construct()
	 */
	public function __construct( $args = array() ) {
		$args = (array) wp_parse_args(
			$args,
			array(
				'singular' => 'invoice',
				'plural'   => 'invoices',
			)
		);

		parent::__construct( $args );
	}

	/**
	 * Check if there is contents in the database.
	 *
	 * @return bool
	 * @since 1.1.0
	 */
	public function is_empty() {
		return parent::is_empty(); // TODO: Change the autogenerated stub
	}

	/**
	 * Render blank state.
	 *
	 * @return void
	 * @since 1.1.0
	 */
	protected function render_blank_state() {
		return parent::render_blank_state(); // TODO: Change the autogenerated stub
	}

	/**
	 * Define which columns to show on this screen.
	 *
	 * @return array
	 * @since 1.1.0
	 */
	public function define_columns() {
		return array(
			'cb'             => '<input type="checkbox" />',
			'invoice_number' => __( 'Number', 'wp-ever-accounting' ),
			'name'           => __( 'Customer Name', 'wp-ever-accounting' ),
			'total'          => __( 'Total', 'wp-ever-accounting' ),
			'issue_date'     => __( 'Invoice Date', 'wp-ever-accounting' ),
			'due_date'       => __( 'Due Date', 'wp-ever-accounting' ),
			'status'         => __( 'Status', 'wp-ever-accounting' ),
			'actions'        => __( 'Actions', 'wp-ever-accounting' ),
		);
	}

	/**
	 * Define sortable columns.
	 *
	 * @return array
	 * @since 1.1.0
	 */
	protected function define_sortable_columns() {
		return array(
			'invoice_number' => array( 'invoice_number', false ),
			'name'           => array( 'name', false ),
			'total'          => array( 'total', false ),
			'issue_date'     => array( 'issue_date', false ),
			'due_date'       => array( 'due_date', false ),
			'status'         => array( 'status', false ),
		);
	}

	//todo need to update the bulk actions
	/**
	 * Define bulk actions
	 *
	 * @return array
	 * @since 1.1.0
	 */
	public function define_bulk_actions() {
		return array(
			'enable'  => __( 'Enable', 'wp-ever-accounting' ),
			'disable' => __( 'Disable', 'wp-ever-accounting' ),
		);
	}

	/**
	 * Define primary column.
	 *
	 * @return string
	 * @since 1.1.0
	 */
	public function get_primary_column() {
		return 'invoice_number';
	}

	/**
	 * Renders the checkbox column in the invoices list table.
	 *
	 * @param Invoice $invoice The current invoice object.
	 *
	 * @return string Displays a checkbox.
	 * @since  1.1.0
	 *
	 */
	function column_cb( $invoice ) {
		return sprintf( '<input type="checkbox" name="invoice_id[]" value="%d"/>', $invoice->get_id() );
	}

	/**
	 * Renders the "Number" column in the invoices list table.
	 *
	 * @param Invoice $invoice The current invoice object.
	 *
	 * @return string Data shown in the Number column.
	 * @since  1.1.0
	 *
	 */
	function column_invoice_number( $invoice ) {
		$invoice_number = $invoice->get_invoice_number();

		$value = sprintf(
			'<a href="%1$s">%2$s</a>',
			esc_url(
				eaccounting_admin_url(
					array(
						'action'     => 'view',
						'invoice_id' => $invoice->get_id(),
					)
				)
			),
			$invoice_number
		);

		return apply_filters( 'eaccounting_invoice_table_name', $value, $invoice );
	}

	/**
	 * Renders the "Contact Name" column in the invoices list table.
	 *
	 * @param Invoice $invoice The current invoice object.
	 *
	 * @return string Data shown in the Contact Name column.
	 * @since  1.1.0
	 *
	 */
	function column_name( $invoice ) {
		return apply_filters( 'eaccounting_invoice_table_contact_name', $invoice->get_name(), $invoice );
	}

	/**
	 * Renders the "Total" column in the invoices list table.
	 *
	 * @param Invoice $invoice The current invoice object.
	 *
	 * @return string Data shown in the Number column.
	 * @since  1.1.0
	 *
	 */
	function column_total( $invoice ) {
		return apply_filters( 'eaccounting_invoice_table_total', eaccounting_price( $invoice->get_total(), $invoice->get_currency_code() ), $invoice );
	}

	/**
	 * Renders the "Invoice Date" column in the invoices list table.
	 *
	 * @param Invoice $invoice The current invoice object.
	 *
	 * @return string Data shown in the Bank Name column.
	 * @since  1.1.0
	 *
	 */
	function column_issue_date( $invoice ) {
		$date = ! empty( $invoice->get_issue_date() ) ? eaccounting_format_datetime( $invoice->get_issue_date(), 'Y-m-d' ) : '&mdash;';
		return apply_filters( 'eaccounting_invoice_table_issue_date', $date, $invoice );
	}

	/**
	 * Renders the "Due Date" column in the invoices list table.
	 *
	 * @param Invoice $invoice The current invoice object.
	 *
	 * @return string Data shown in the Bank Name column.
	 * @since  1.1.0
	 *
	 */
	function column_due_date( $invoice ) {
		$date = ! empty( $invoice->get_due_date() ) ? eaccounting_format_datetime( $invoice->get_due_date(), 'Y-m-d' ) : '&mdash;';
		return apply_filters( 'eaccounting_invoice_table_due_date', $date, $invoice );
	}

	/**
	 * Renders the "Status" column in the invoices list table.
	 *
	 * @param Invoice $invoice The current invoice object.
	 *
	 * @return string Data shown in the Bank Name column.
	 * @since  1.1.0
	 *
	 */
	function column_status( $invoice ) {
		return apply_filters( 'eaccounting_invoice_table_status', sprintf( '<span class="invoice-status %s">%s</span>', $invoice->get_status(), $invoice->get_status_nicename() ), $invoice );
	}

	/**
	 * @param $invoice
	 *
	 * @return string
	 * @since 1.1.0
	 *
	 */
	function column_actions( $invoice ) {
		$base_uri              = eaccounting_admin_url(
			array(
				'invoice_id' => $invoice->get_id(),
				'tab'        => 'accounts',
			)
		);
		$row_actions           = array();
		$row_actions['edit']   = array(
			'label'    => __( 'Edit', 'wp-ever-accounting' ),
			'base_uri' => $base_uri,
		);
		$row_actions['delete'] = array(
			'label'    => __( 'Delete', 'wp-ever-accounting' ),
			'base_uri' => $base_uri,
			'nonce'    => 'invoice-nonce',
		);

		$row_actions = apply_filters( 'eaccounting_invoice_row_actions', $row_actions, $invoice );

		return $this->row_actions( $row_actions );
	}


	/**
	 * Renders the message to be displayed when there are no items.
	 *
	 * @return void
	 * @since  1.1.0
	 */
	function no_items() {
		_e( 'No invoices found.', 'wp-ever-accounting' );
	}

	//todo need to change the bulk actions functions
	/**
	 * Process the bulk actions
	 *
	 * @return void
	 * @since 1.1.0
	 */
	public function process_bulk_action() {
		if ( empty( $_REQUEST['_wpnonce'] ) ) {
			return;
		}

		if ( ! wp_verify_nonce( $_REQUEST['_wpnonce'], 'bulk-accounts' ) && ! wp_verify_nonce( $_REQUEST['_wpnonce'], 'account-nonce' ) ) {
			return;
		}

		$ids = isset( $_GET['invoice_id'] ) ? $_GET['invoice_id'] : false;

		if ( ! is_array( $ids ) ) {
			$ids = array( $ids );
		}

		$ids = array_map( 'absint', $ids );

		if ( empty( $ids ) ) {
			return;
		}

		$action = $this->current_action();
		foreach ( $ids as $id ) {
			switch ( $action ) {
				case 'enable':
					eaccounting_insert_account(
						array(
							'id'      => $id,
							'enabled' => '1',
						)
					);
					break;
				case 'disable':
					eaccounting_insert_account(
						array(
							'id'      => $id,
							'enabled' => '0',
						)
					);
					break;
				case 'delete':
					eaccounting_delete_account( $id );
					break;
				default:
					do_action( 'eaccounting_accounts_do_bulk_action_' . $this->current_action(), $id );
			}
		}

		if ( isset( $_GET['_wpnonce'] ) ) {
			wp_safe_redirect(
				remove_query_arg(
					array(
						'invoice_id',
						'action',
						'_wpnonce',
						'_wp_http_referer',
						'action2',
						'paged',
					)
				)
			);
			exit();
		}
	}

	/**
	 * Retrieve all the data for the table.
	 * Setup the final data for the table
	 *
	 * @return void
	 * @since 1.1.0
	 */
	public function prepare_items() {
		$columns               = $this->get_columns();
		$hidden                = $this->get_hidden_columns();
		$sortable              = $this->get_sortable_columns();
		$this->_column_headers = array( $columns, $hidden, $sortable );

		$this->process_bulk_action();

		$page    = isset( $_GET['paged'] ) ? absint( $_GET['paged'] ) : 1;
		$status  = isset( $_GET['status'] ) ? $_GET['status'] : '';
		$search  = isset( $_GET['s'] ) ? $_GET['s'] : '';
		$order   = isset( $_GET['order'] ) ? $_GET['order'] : 'DESC';
		$orderby = isset( $_GET['orderby'] ) ? $_GET['orderby'] : 'id';

		$per_page = $this->get_per_page();

		$args = wp_parse_args(
			$this->query_args,
			array(
				'number'   => $per_page,
				'offset'   => $per_page * ( $page - 1 ),
				'per_page' => $per_page,
				'page'     => $page,
				'status'   => $status,
				'search'   => $search,
				'orderby'  => eaccounting_clean( $orderby ),
				'order'    => eaccounting_clean( $order ),
			)
		);

		$args              = apply_filters( 'eaccounting_invoices_table_query_args', $args, $this );
		$this->items       = eaccounting_get_invoices( $args );
		$this->total_count = eaccounting_get_invoices( array_merge( $args, array( 'count_total' => true ) ) );
		$this->set_pagination_args(
			array(
				'total_items' => $this->total_count,
				'per_page'    => $per_page,
				'total_pages' => ceil( $this->total_count / $per_page ),
			)
		);
	}
}
