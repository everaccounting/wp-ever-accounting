<?php
/**
 * Api Keys Admin List Table.
 *
 * @since       1.1.0
 * @subpackage  EverAccounting\Admin\ListTables
 * @package     EverAccounting
 */

namespace EverAccounting\Admin\ListTables;

use EverAccounting\Abstracts\List_Table;
use EverAccounting\Models\ApiKey;


defined( 'ABSPATH' ) || exit();

/**
 * Class List_Table_Api_Keys
 *
 * @since   1.1.0
 *
 */
class List_Table_Api_Keys extends List_Table {
	/**
	 * Type of the table should be use plural name.
	 *
	 * This will be used for filtering methods.
	 *
	 * @since 1.1.0
	 * @var string
	 */
	protected $list_table_type = 'api_keys';

	/**
	 * Default number of items to show per page
	 *
	 * @since 1.1.0
	 * @var string
	 */
	public $per_page = 20;

	/**
	 * Total number of item found
	 *
	 * @since 1.1.0
	 * @var int
	 */
	public $total_count;


	/**
	 * Get things started
	 *
	 * @param array $args Optional. Arbitrary display and query arguments to pass through the list table. Default empty array.
	 *
	 * @see    WP_List_Table::__construct()
	 *
	 * @since  1.1.0
	 *
	 */
	public function __construct( $args = array() ) {
		$args = (array) wp_parse_args(
			$args,
			array(
				'singular' => 'api-key',
				'plural'   => 'api-keys',
			)
		);

		parent::__construct( $args );
	}

	/**
	 * Check if there is contents in the database.
	 *
	 * @return bool
	 * @since 1.1.0
	 */
	public function is_empty() {
		return parent::is_empty(); // TODO: Change the autogenerated stub
	}

	/**
	 * Render blank state.
	 *
	 * @return void
	 * @since 1.1.0
	 */
	protected function render_blank_state() {
		return parent::render_blank_state(); // TODO: Change the autogenerated stub
	}

	/**
	 * Define which columns to show on this screen.
	 *
	 * @return array
	 * @since 1.1.0
	 */
	public function define_columns() {
		return array(
			'cb'            => '<input type="checkbox" />',
			'description'   => __( 'Description', 'wp-ever-accounting' ),
			'truncated_key' => __( 'API key ending in', 'wp-ever-accounting' ),
			'user_id'       => __( 'User', 'wp-ever-accounting' ),
			'permission'    => __( 'Permission', 'wp-ever-accounting' ),
			'last_access'   => __( 'Last Access', 'wp-ever-accounting' ),
			'actions'       => __( 'Actions', 'wp-ever-accounting' ),
		);
	}

	/**
	 * Define sortable columns.
	 *
	 * @return array
	 * @since 1.1.0
	 */
	protected function define_sortable_columns() {
		return array(
			'description' => array( 'description', false ),
			'user_id'     => array( 'user_id', false ),
			'permission'  => array( 'permission', false ),
		);
	}

	/**
	 * Define bulk actions
	 *
	 * @return array
	 * @since 1.1.0
	 */
	public function define_bulk_actions() {
		return array(
			'revoke' => __( 'Revoke', 'wp-ever-accounting' ),
		);
	}


	/**
	 * Define primary column.
	 *
	 * @return string
	 * @since 1.1.0
	 */
	public function get_primary_column() {
		return 'description';
	}


	/**
	 * Renders the checkbox column in the api keys list table.
	 *
	 * @param ApiKey $api_key The current object.
	 *
	 * @return string Displays a checkbox.
	 * @since  1.1.0
	 *
	 */
	function column_cb( $api_key ) {
		return sprintf( '<input type="checkbox" name="api_key_id[]" value="%d"/>', $api_key->get_id() );
	}

	/**
	 * Renders the "Description" column in the api key list table.
	 *
	 * @param ApiKey $api_key The current object.
	 *
	 * @return string Data shown in the Name column.
	 * @since  1.1.0
	 *
	 */
	function column_description( $api_key ) {
		$description = $api_key->get_description();

		$value = sprintf(
			'<a href="%1$s">%2$s</a>',
			esc_url(
				eaccounting_admin_url(
					array(
						'action'     => 'edit',
						'tab'        => 'advanced',
						'api_key_id' => $api_key->get_id(),
					)
				)
			),
			$description
		);

		return apply_filters( 'eaccounting_api_keys_table_name', $value, $api_key );
	}

	/**
	 * Renders the "user_id" column in the api_keys list table.
	 *
	 * @param ApiKey $api_key The current object.
	 *
	 * @return string Data shown in the type column.
	 * @since  1.1.0
	 *
	 */
	function column_user_id( $api_key ) {
		$user_id = $api_key->get_user_id();

		return apply_filters( 'eaccounting_api_keys_table_user_id', esc_html( $user_id ), $api_key );
	}

	/**
	 * Renders the "truncated_key" column in the api_keys list table.
	 *
	 * @param ApiKey $api_key The current object.
	 *
	 * @return string Data shown in the type column.
	 * @since  1.1.0
	 *
	 */
	function column_truncated_key( $api_key ) {
		$truncated_key = $api_key->get_truncated_key();

		return apply_filters( 'eaccounting_api_keys_table_truncated_key', '<code>'.'...'.$truncated_key.'</code>', $api_key );
	}

	/**
	 * Renders the "Permission" column in the api_keys list table.
	 *
	 * @param ApiKey $api_key The current object. .
	 *
	 * @return string Data shown in the Name column.
	 * @since  1.1.0
	 *
	 */
	function column_permission( $api_key ) {
		$permission = $api_key->get_permission();

		return apply_filters( 'eaccounting_api_keys_table_permission', $permission, $api_key );
	}

	/**
	 * Renders the "Last Access" column in the api_keys list table.
	 *
	 * @param ApiKey $api_key The current object. .
	 *
	 * @return string Data shown in the Name column.
	 * @since  1.1.0
	 *
	 */
	function column_last_access( $api_key ) {
		$last_access = (null != $api_key->get_last_access()) ? $api_key->get_last_access() : __('Unknown','wp-ever-accounting');

		return apply_filters( 'eaccounting_api_keys_table_last_access', $last_access, $api_key );
	}

	/**
	 * @param ApiKey $api_key The current object.
	 *
	 * @return string
	 * @since 1.1.0
	 *
	 */

	function column_actions( $api_key ) {
		$base_uri              = eaccounting_admin_url(
			array(
				'api_key_id' => $api_key->get_id(),
				'tab'        => 'advanced',
			)
		);
		$row_actions           = array();
		$row_actions['edit']   = array(
			'label'    => __( 'Edit', 'wp-ever-accounting' ),
			'base_uri' => $base_uri,
		);
		$row_actions['revoke'] = array(
			'label'    => __( 'Revoke', 'wp-ever-accounting' ),
			'base_uri' => $base_uri,
			'nonce'    => 'api-key-nonce',
		);

		$row_actions = apply_filters( 'eaccounting_api_keys_row_actions', $row_actions, $api_key );

		return $this->row_actions( $row_actions );
	}


	/**
	 * Renders the message to be displayed when there are no items.
	 *
	 * @return void
	 * @since  1.1.0
	 */
	function no_items() {
		_e( 'No api keys found.', 'wp-ever-accounting' );
	}

	/**
	 * Process the bulk actions
	 *
	 * @return void
	 * @since 1.1.0
	 */
	public function process_bulk_action() {
		if ( empty( $_REQUEST['_wpnonce'] ) ) {
			return;
		}

		if ( ! wp_verify_nonce( $_REQUEST['_wpnonce'], 'bulk-api-keys' ) && ! wp_verify_nonce( $_REQUEST['_wpnonce'], 'api-key-nonce' ) ) {
			return;
		}

		$ids = isset( $_GET['api_key_id'] ) ? $_GET['api_key_id'] : false;

		if ( ! is_array( $ids ) ) {
			$ids = array( $ids );
		}

		$ids = array_map( 'absint', $ids );

		if ( empty( $ids ) ) {
			return;
		}

		$action = $this->current_action();
		foreach ( $ids as $id ) {
			switch ( $action ) {
				case 'revoke':
					eaccounting_delete_api_key( $id );
					break;
				default:
					do_action( 'eaccounting_api_keys_do_bulk_action_' . $this->current_action(), $id );
			}
		}

		if ( isset( $_GET['_wpnonce'] ) ) {
			wp_safe_redirect(
				remove_query_arg(
					array(
						'api_key_id',
						'action',
						'_wpnonce',
						'_wp_http_referer',
						'action2',
						'doaction',
						'paged',
					)
				)
			);
			exit();
		}
	}

	/**
	 * Retrieve all the data for the table.
	 * Setup the final data for the table
	 *
	 * @return void
	 * @since 1.1.0
	 */
	public function prepare_items() {
		$columns               = $this->get_columns();
		$hidden                = $this->get_hidden_columns();
		$sortable              = $this->get_sortable_columns();
		$this->_column_headers = array( $columns, $hidden, $sortable );

		$this->process_bulk_action();

		$page    = isset( $_GET['paged'] ) ? absint( $_GET['paged'] ) : 1;
		$status  = isset( $_GET['status'] ) ? $_GET['status'] : '';
		$search  = isset( $_GET['s'] ) ? $_GET['s'] : '';
		$order   = isset( $_GET['order'] ) ? $_GET['order'] : 'DESC';
		$orderby = isset( $_GET['orderby'] ) ? $_GET['orderby'] : 'id';

		$per_page = $this->get_per_page();

		$args = wp_parse_args(
			$this->query_args,
			array(
				'number'   => $per_page,
				'offset'   => $per_page * ( $page - 1 ),
				'per_page' => $per_page,
				'page'     => $page,
				'search'   => $search,
				'status'   => $status,
				'orderby'  => eaccounting_clean( $orderby ),
				'order'    => eaccounting_clean( $order ),
			)
		);

		$args = apply_filters( 'eaccounting_api_keys_table_get_api_keys', $args, $this );

		$this->items = eaccounting_get_api_keys( $args );


		$status = isset( $_GET['status'] ) ? $_GET['status'] : 'any';

		switch ( $status ) {
			case 'any':
			default:
				$total_items = $this->total_count;
				break;
		}

		$this->set_pagination_args(
			array(
				'total_items' => $total_items,
				'per_page'    => $per_page,
				'total_pages' => ceil( $total_items / $per_page ),
			)
		);
	}

}
