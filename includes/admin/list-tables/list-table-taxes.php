<?php
/**
 * Accounts Admin List Table
 *
 * @since       1.1.0
 * @subpackage  EverAccounting\Admin\ListTables
 * @package     EverAccounting
 */

namespace EverAccounting\Admin\ListTables;

use EverAccounting\Abstracts\List_Table;
use EverAccounting\Models\Tax;

defined( 'ABSPATH' ) || exit();

class List_Table_Taxes extends List_Table {
	/**
	 * Type of the table should be use plural name.
	 *
	 * This will be used for filtering methods.
	 *
	 * @since 1.1.0
	 * @var string
	 */
	protected $list_table_type = 'taxes';

	/**
	 * Default number of items to show per page
	 *
	 * @since 1.1.0
	 * @var string
	 */
	public $per_page = 20;

	/**
	 * Total number of item found
	 *
	 * @since 1.1.0
	 * @var int
	 */
	public $total_count;

	/**
	 * Number of active items found
	 *
	 * @since 1.1.0
	 * @var string
	 */
	public $active_count;

	/**
	 *  Number of inactive items found
	 *
	 * @since 1.1.0
	 * @var string
	 */
	public $inactive_count;

	/**
	 * Get things started
	 *
	 * @since  1.1.0
	 *
	 * @see    WP_List_Table::__construct()
	 *
	 * @param array $args Optional. Arbitrary display and query arguments to pass through the list table. Default empty array.
	 */
	public function __construct( $args = array() ) {
		$args = (array) wp_parse_args(
			$args,
			array(
				'singular' => 'account',
				'plural'   => 'accounts',
			)
		);

		parent::__construct( $args );
	}

	/**
	 * Check if there is contents in the database.
	 *
	 * @since 1.1.0
	 * @return bool
	 */
	public function is_empty() {
		return parent::is_empty(); // TODO: Change the autogenerated stub
	}

	/**
	 * Render blank state.
	 *
	 * @since 1.1.0
	 * @return void
	 */
	protected function render_blank_state() {
		return parent::render_blank_state(); // TODO: Change the autogenerated stub
	}

	/**
	 * Define which columns to show on this screen.
	 *
	 * @since 1.1.0
	 * @return array
	 */
	public function define_columns() {
		return array(
			'cb'      => '<input type="checkbox" />',
			'name'    => __( 'Name', 'wp-ever-accounting' ),
			'rate'    => __( 'Rate(%)', 'wp-ever-accounting' ),
			'type'    => __( 'Type', 'wp-ever-accounting' ),
			'enabled' => __( 'Enabled', 'wp-ever-accounting' ),
			'actions' => __( 'Actions', 'wp-ever-accounting' ),
		);
	}

	/**
	 * Define sortable columns.
	 *
	 * @since 1.1.0
	 * @return array
	 */
	protected function define_sortable_columns() {
		return array(
			'name'    => array( 'name', false ),
			'rate'    => array( 'rate', false ),
			'type'    => array( 'type', false ),
			'enabled' => array( 'enabled', false ),
		);
	}

	/**
	 * Define bulk actions
	 *
	 * @since 1.1.0
	 * @return array
	 */
	public function define_bulk_actions() {
		return array(
			'enable'  => __( 'Enable', 'wp-ever-accounting' ),
			'disable' => __( 'Disable', 'wp-ever-accounting' ),
		);
	}

	/**
	 * Define primary column.
	 *
	 * @since 1.1.0
	 * @return string
	 */
	public function get_primary_column() {
		return 'name';
	}

	/**
	 * Renders the checkbox column in the accounts list table.
	 *
	 * @since  1.0.2
	 *
	 * @param Tax $tax The current account object.
	 *
	 * @return string Displays a checkbox.
	 */
	function column_cb( $tax ) {
		return sprintf( '<input type="checkbox" name="tax_id[]" value="%d"/>', $tax->get_id() );
	}

	/**
	 * Renders the "Name" column in the list table.
	 *
	 * @since  1.1.0
	 *
	 * @param Tax $tax The current object.
	 *
	 * @return string Data shown in the Name column.
	 */
	function column_name( $tax ) {
		$name = $tax->get_name();

		$value = sprintf(
			'<a href="%1$s">%2$s</a>',
			esc_url(
				eaccounting_admin_url(
					array(
						'action' => 'edit',
						'tab'    => 'taxes',
						'tax_id' => $tax->get_id(),
					)
				)
			),
			$name
		);

		return apply_filters( 'eaccounting_tax_table_name', $value, $tax );
	}

	/**
	 * @since 1.1.0
	 *
	 * @param Tax $tax
	 *
	 * @return mixed|void
	 */
	function column_rate( $tax ) {
		return apply_filters( 'eaccounting_tax_table_rate', eaccounting_round_number( $tax->get_rate(), 2 ), $tax );
	}

	/**
	 * @since 1.1.0
	 *
	 * @param Tax $tax
	 */
	function column_type( $tax ) {
		$tax_types = eaccounting_get_tax_types();
		$name      = array_key_exists( $tax->get_type(), $tax_types ) ? $tax_types[ $tax->get_type() ] : '&mdash';

		return apply_filters( 'eaccounting_tax_table_type', esc_html( $name ), $tax );
	}

	/**
	 * Renders the "enabled" column in the list table.
	 *
	 * @since  1.1.0
	 *
	 * @param Tax $tax The current object.
	 *
	 * @return string Data shown in the "enabled" column.
	 */
	function column_enabled( $tax ) {
		ob_start();
		eaccounting_toggle(
			array(
				'name'  => 'enabled',
				'id'    => 'enabled_' . $tax->get_id(),
				'value' => $tax->get_enabled( 'edit' ),
				'naked' => true,
				'class' => 'ea_item_status_update',
				'attr'  => array(
					'data-object_id'   => $tax->get_id(),
					'data-nonce'       => wp_create_nonce( 'ea_status_update' ),
					'data-object_type' => 'tax',
				),
			)
		);
		$output = ob_get_contents();
		ob_get_clean();

		return apply_filters( 'eaccounting_tax_table_enabled', $output, $tax );
	}

	/**
	 * @since 1.1.0
	 *
	 * @param $tax
	 *
	 * @return string
	 */
	function column_actions( $tax ) {
		$base_uri              = eaccounting_admin_url(
			array(
				'tax_id' => $tax->get_id(),
				'tab'    => 'taxes',
			)
		);
		$row_actions           = array();
		$row_actions['edit']   = array(
			'label'    => __( 'Edit', 'wp-ever-accounting' ),
			'base_uri' => $base_uri,
		);
		$row_actions['delete'] = array(
			'label'    => __( 'Delete', 'wp-ever-accounting' ),
			'base_uri' => $base_uri,
			'nonce'    => 'tax-nonce',
		);

		$row_actions = apply_filters( 'eaccounting_tax_row_actions', $row_actions, $tax );

		return $this->row_actions( $row_actions );
	}


	/**
	 * Renders the message to be displayed when there are no items.
	 *
	 * @since  1.1.0
	 * @return void
	 */
	function no_items() {
		_e( 'No taxes found.', 'wp-ever-accounting' );
	}

	/**
	 * Process the bulk actions
	 *
	 * @since 1.1.0
	 * @return void
	 */
	public function process_bulk_action() {
		if ( empty( $_REQUEST['_wpnonce'] ) ) {
			return;
		}

		if ( ! wp_verify_nonce( $_REQUEST['_wpnonce'], 'bulk-taxes' ) && ! wp_verify_nonce( $_REQUEST['_wpnonce'], 'tax-nonce' ) ) {
			return;
		}

		$ids = isset( $_GET['tax_id'] ) ? $_GET['tax_id'] : false;

		if ( ! is_array( $ids ) ) {
			$ids = array( $ids );
		}

		$ids = array_map( 'absint', $ids );

		if ( empty( $ids ) ) {
			return;
		}

		$action = $this->current_action();
		foreach ( $ids as $id ) {
			switch ( $action ) {
				case 'enable':
					eaccounting_insert_tax(
						array(
							'id'      => $id,
							'enabled' => '1',
						)
					);
					break;
				case 'disable':
					eaccounting_insert_tax(
						array(
							'id'      => $id,
							'enabled' => '0',
						)
					);
					break;
				case 'delete':
					eaccounting_delete_tax( $id );
					break;
				default:
					do_action( 'eaccounting_tax_do_bulk_action_' . $this->current_action(), $id );
			}
		}

		if ( isset( $_GET['_wpnonce'] ) ) {
			wp_safe_redirect(
				remove_query_arg(
					array(
						'tax_id',
						'action',
						'_wpnonce',
						'_wp_http_referer',
						'action2',
						'paged',
					)
				)
			);
			exit();
		}
	}


	/**
	 * Retrieve the view types
	 *
	 * @access public
	 * @since  1.1.0
	 * @return array $views All the views available
	 */
	public function get_views() {
		$base           = eaccounting_admin_url( array( 'tab' => 'taxes' ) );
		$current        = isset( $_GET['status'] ) ? $_GET['status'] : '';
		$total_count    = '&nbsp;<span class="count">(' . $this->total_count . ')</span>';
		$active_count   = '&nbsp;<span class="count">(' . $this->active_count . ')</span>';
		$inactive_count = '&nbsp;<span class="count">(' . $this->inactive_count . ')</span>';

		$views = array(
			'all'      => sprintf( '<a href="%s"%s>%s</a>', esc_url( remove_query_arg( 'status', $base ) ), $current === 'all' || $current !== '' ? ' class="current"' : '', __( 'All', 'wp-ever-accounting' ) . $total_count ),
			'active'   => sprintf( '<a href="%s"%s>%s</a>', esc_url( add_query_arg( 'status', 'active', $base ) ), $current === 'active' ? ' class="current"' : '', __( 'Active', 'wp-ever-accounting' ) . $active_count ),
			'inactive' => sprintf( '<a href="%s"%s>%s</a>', esc_url( add_query_arg( 'status', 'inactive', $base ) ), $current === 'inactive' ? ' class="current"' : '', __( 'Inactive', 'wp-ever-accounting' ) . $inactive_count ),
		);

		return $views;
	}

	/**
	 * Retrieve all the data for the table.
	 * Setup the final data for the table
	 *
	 * @since 1.0.2
	 * @return void
	 */
	public function prepare_items() {
		$columns               = $this->get_columns();
		$hidden                = $this->get_hidden_columns();
		$sortable              = $this->get_sortable_columns();
		$this->_column_headers = array( $columns, $hidden, $sortable );

		$this->process_bulk_action();

		$page     = isset( $_GET['paged'] ) ? absint( $_GET['paged'] ) : 1;
		$status   = isset( $_GET['status'] ) ? $_GET['status'] : '';
		$search   = isset( $_GET['s'] ) ? $_GET['s'] : '';
		$order    = isset( $_GET['order'] ) ? $_GET['order'] : 'DESC';
		$orderby  = isset( $_GET['orderby'] ) ? $_GET['orderby'] : 'id';
		$per_page = $this->get_per_page();

		$args = wp_parse_args(
			$this->query_args,
			array(
				'offset'   => $per_page * ( $page - 1 ),
				'per_page' => $per_page,
				'page'     => $page,
				'status'   => 'active' === $status && ! is_numeric( $status ) ? 1 : 0,
				'search'   => $search,
				'orderby'  => eaccounting_clean( $orderby ),
				'order'    => eaccounting_clean( $order ),
			)
		);



		$this->items = eaccounting_get_taxes($args);

		$this->active_count = eaccounting_get_taxes(
			array_merge(
				$args,
				array(
					'count_total' => true,
					'status'      => 'active',
				)
			)
		);

		$this->inactive_count = eaccounting_get_taxes(
			array_merge(
				$args,
				array(
					'count_total' => true,
					'status'      => 'inactive',
				)
			)
		);

		$this->total_count    = $this->active_count + $this->inactive_count;

		$status = isset( $_GET['status'] ) ? $_GET['status'] : 'any';

		switch ( $status ) {
			case 'active':
				$total_items = $this->active_count;
				break;
			case 'inactive':
				$total_items = $this->inactive_count;
				break;
			case 'any':
			default:
				$total_items = $this->total_count;
				break;
		}

		$this->set_pagination_args(
			array(
				'total_items' => $total_items,
				'per_page'    => $per_page,
				'total_pages' => ceil( $total_items / $per_page ),
			)
		);
	}
}
