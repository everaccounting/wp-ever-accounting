<?php
/**
 * Transactions Admin List Table
 *
 * @package     EverAccounting
 * @subpackage  Admin/ListTable
 * @since       1.0.2
 */

namespace EverAccounting\Admin\Transactions;

use EverAccounting\Abstracts\List_Table;
use EverAccounting\Query_Transaction;
use EverAccounting\Transaction;

defined( 'ABSPATH' ) || exit();

class List_Table_Transactions extends List_Table {
	/**
	 * Type of the table should be use plural name.
	 *
	 * This will be used for filtering methods.
	 *
	 * @var string
	 * @since 1.0.2
	 */
	protected $list_table_type = 'transactions';

	/**
	 * Default number of items to show per page
	 *
	 * @var string
	 * @since 1.0.2
	 */
	public $per_page = 20;

	/**
	 * Total number of item found
	 *
	 * @var int
	 * @since 1.0.2
	 */
	public $total_count;

	/**
	 * Total number of income item found
	 *
	 * @var int
	 * @since 1.0.2
	 */
	protected $income_count;

	/**
	 * Total number of expense item found
	 *
	 * @var int
	 * @since 1.0.2
	 */
	protected $expense_count;

	/**
	 * Total number of others item found
	 *
	 * @var int
	 * @since 1.0.2
	 */
	protected $others_count;

	/**
	 * Get things started
	 *
	 * @param array $args Optional. Arbitrary display and query arguments to pass through the list table. Default empty array.
	 *
	 * @see WP_List_Table::__construct()
	 *
	 * @since  1.0
	 *
	 */
	public function __construct( $args = array() ) {
		$args = (array) wp_parse_args( $args, array(
			'singular' => 'transaction',
			'plural'   => 'transactions',
		) );

		parent::__construct( $args );
	}

	/**
	 * Check if there is contents in the database.
	 *
	 * @return bool
	 * @since 1.0.2
	 */
	public function is_empty() {
		return parent::is_empty(); // TODO: Change the autogenerated stub
	}

	/**
	 * Render blank state.
	 *
	 * @return void
	 * @since 1.0.2
	 */
	protected function render_blank_state() {
		return parent::render_blank_state(); // TODO: Change the autogenerated stub
	}

	/**
	 * Define which columns to show on this screen.
	 *
	 * @return array
	 * @since 1.0.2
	 */
	public function define_columns() {
		return array(
			'date'        => __( 'Date', 'wp-ever-accounting' ),
			'amount'      => __( 'Amount', 'wp-ever-accounting' ),
			'account_id'  => __( 'Account Name', 'wp-ever-accounting' ),
			'type'        => __( 'Type', 'wp-ever-accounting' ),
			'category_id' => __( 'Category', 'wp-ever-accounting' ),
			'reference'   => __( 'Reference', 'wp-ever-accounting' ),
		);
	}

	/**
	 * Define sortable columns.
	 *
	 * @return array
	 * @since 1.0.2
	 */
	protected function define_sortable_columns() {
		return array(
			'date'        => array( 'date', false ),
			'amount'      => array( 'amount', false ),
			'account_id'  => array( 'account_id', false ),
			'type'        => array( 'type', false ),
			'category_id' => array( 'category_id', false ),
			'reference'   => array( 'reference', false ),
		);
	}

	/**
	 * Define primary column.
	 *
	 * @return string
	 * @since 1.0.2
	 */
	public function get_primary_column() {
		return 'date';
	}

	/**
	 * Renders the "Date" column in the accounts list table.
	 *
	 *
	 * @param Transaction $transaction The current account object.
	 *
	 * @return string Data shown in the Name column.
	 * @since  1.0.2
	 *
	 */
	function column_date( $transaction ) {
		$date = $transaction->get_paid_at()->date_i18n();

		$value = sprintf( '<a href="%1$s">%2$s</a>',
			esc_url( eaccounting_admin_url( [ 'action' => 'edit', 'account_id' => $transaction->get_id() ] ) ),
			$date
		);

		return apply_filters( 'eaccounting_transaction_table_date', $value, $transaction );
	}

	/**
	 * Renders the "amount" column in the accounts list table.
	 *
	 * @param Transaction $transaction The current account object.
	 *
	 * @return string Data shown in the amount column.
	 * @since  1.0.2
	 *
	 */
	function column_amount( $transaction ) {
		return apply_filters( 'eaccounting_transaction_table_amount', $transaction->get_formatted_amount(), $transaction );
	}

	/**
	 * Renders the "account" column in the accounts list table.
	 *
	 * @param Transaction $transaction The current account object.
	 *
	 * @return string Data shown in the account column.
	 * @since  1.0.2
	 *
	 */
	function column_account_id( $transaction ) {
		$account = eaccounting_get_account( $transaction->get_account_id( 'edit' ) );
		$name    = $account ? $account->get_name() : __( '(Deleted Account)', 'wp-ever-account' );

		return apply_filters( 'eaccounting_transaction_table_account', esc_html( $name ), $transaction );
	}

	/**
	 * Renders the "type" column in the accounts list table.
	 *
	 * @param Transaction $transaction The current account object.
	 *
	 * @return string Data shown in the type column.
	 * @since  1.0.2
	 *
	 */
	function column_type( $transaction ) {
		$type  = $transaction->get_type();
		$types = eaccounting_get_transaction_types();
		$type  = array_key_exists( $type, $types ) ? $types[ $type ] : ucfirst( $type );

		return apply_filters( 'eaccounting_transaction_table_type', esc_html( $type ), $transaction );
	}

	/**
	 * Renders the "Category" column in the accounts list table.
	 *
	 * @param Transaction $transaction The current account object.
	 *
	 * @return string Data shown in the Category column.
	 * @since  1.0.2
	 *
	 */
	function column_category_id( $transaction ) {
		$account = eaccounting_get_category( $transaction->get_category_id( 'edit' ) );
		$name    = $account ? $account->get_name() : __( '(Deleted Category)', 'wp-ever-account' );

		return apply_filters( 'eaccounting_transaction_table_category', esc_html( $name ), $transaction );
	}

	/**
	 * Renders the "Reference" column in the accounts list table.
	 *
	 * @param Transaction $transaction The current account object.
	 *
	 * @return string Data shown in the Reference column.
	 * @since  1.0.2
	 *
	 */
	function column_reference( $transaction ) {
		$reference = empty( $transaction->get_reference() ) ? '&mdash;' : $transaction->get_reference();

		return apply_filters( 'eaccounting_transaction_table_reference', esc_html( $reference ), $transaction );
	}


	/**
	 * Renders the message to be displayed when there are no items.
	 *
	 * @return void
	 * @since  1.0.2
	 */
	function no_items() {
		_e( 'No transactions found.', 'wp-ever-accounting' );
	}

	/**
	 * Retrieve the view types
	 *
	 * @access public
	 * @return array $views All the views available
	 * @since 1.0
	 */
	public function get_views() {
		$base          = eaccounting_admin_url();
		$current       = isset( $_GET['type'] ) ? $_GET['type'] : '';
		$total_count   = '&nbsp;<span class="count">(' . $this->total_count . ')</span>';
		$income_count  = '&nbsp;<span class="count">(' . $this->income_count . ')</span>';
		$expense_count = '&nbsp;<span class="count">(' . $this->expense_count . ')</span>';
		$others_count  = '&nbsp;<span class="count">(' . $this->others_count . ')</span>';

		$views = array(
			'all'     => sprintf( '<a href="%s"%s>%s</a>', esc_url( remove_query_arg( 'type', $base ) ), $current === 'all' || $current == '' ? ' class="current"' : '', __( 'All', 'wp-ever-accounting' ) . $total_count ),
			'income'  => sprintf( '<a href="%s"%s>%s</a>', esc_url( add_query_arg( 'type', 'income', $base ) ), $current === 'income' ? ' class="current"' : '', __( 'Income', 'wp-ever-accounting' ) . $income_count ),
			'expense' => sprintf( '<a href="%s"%s>%s</a>', esc_url( add_query_arg( 'type', 'expense', $base ) ), $current === 'expense' ? ' class="current"' : '', __( 'Expense', 'wp-ever-accounting' ) . $expense_count ),
			'other'   => sprintf( '<a href="%s"%s>%s</a>', esc_url( add_query_arg( 'type', 'other', $base ) ), $current === 'other' ? ' class="current"' : '', __( 'Other', 'wp-ever-accounting' ) . $others_count ),
		);

		return $views;
	}

	/**
	 * Retrieve all the data for the table.
	 * Setup the final data for the table
	 *
	 * @return void
	 * @since 1.0.2
	 */
	public function prepare_items() {
		$columns               = $this->get_columns();
		$hidden                = $this->get_hidden_columns();
		$sortable              = $this->get_sortable_columns();
		$this->_column_headers = array( $columns, $hidden, $sortable );

		$page    = isset( $_GET['paged'] ) ? absint( $_GET['paged'] ) : 1;
		$type    = isset( $_GET['type'] ) ? $_GET['type'] : '';
		$search  = isset( $_GET['s'] ) ? $_GET['s'] : '';
		$order   = isset( $_GET['order'] ) ? $_GET['order'] : 'DESC';
		$orderby = isset( $_GET['orderby'] ) ? $_GET['orderby'] : 'id';

		$per_page = $this->get_per_page();

		$args = wp_parse_args( $this->query_args, array(
			'number'  => $per_page,
			'offset'  => $per_page * ( $page - 1 ),
			'type'    => $type,
			'search'  => $search,
			'orderby' => eaccounting_clean( $orderby ),
			'order'   => eaccounting_clean( $order )
		) );

		$args = apply_filters( 'eaccounting_transactions_table_get_transactions', $args, $this );

		$this->items = Query_Transaction::init()->wp_query( $args )->get( OBJECT, 'eaccounting_get_transaction' );

		//$this->total_count = Query_Transaction::init()->wp_query( $args )->count();

		$this->income_count = Query_Transaction::init()->wp_query( array_merge( $this->query_args, array(
			'type'   => 'income',
			'search' => $search
		) ) )->count();

		$this->expense_count = Query_Transaction::init()->wp_query( array_merge( $this->query_args, array(
			'type'   => 'expense',
			'search' => $search
		) ) )->count();

		$this->others_count = Query_Transaction::init()->wp_query( array_merge( $this->query_args, array(
			'type'   => 'other',
			'search' => $search
		) ) )->count();

		$this->total_count = $this->income_count + $this->expense_count + $this->others_count;

		$type = isset( $_GET['type'] ) ? $_GET['type'] : 'any';

		switch ( $type ) {
			case 'income':
				$total_items = $this->income_count;
				break;
			case 'expense':
				$total_items = $this->expense_count;
				break;
			case 'other':
				$total_items = $this->others_count;
				break;
			case 'any':
			default:
				$total_items = $this->total_count;
				break;
		}

		$this->set_pagination_args( array(
			'total_items' => $total_items,
			'per_page'    => $per_page,
			'total_pages' => ceil( $total_items / $per_page )
		) );
	}
}
